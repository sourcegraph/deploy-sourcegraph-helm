apiVersion: apps/v1
kind: StatefulSet
metadata:
  annotations:
    description: Metrics/monitoring dashboards and alerts.
    kubectl.kubernetes.io/default-container: grafana
  labels:
    {{- include "sourcegraph.labels" . | nindent 4 }}
    {{- if .Values.grafana.labels }}
      {{- toYaml .Values.grafana.labels | nindent 4 }}
    {{- end }}
    deploy: sourcegraph
    sourcegraph-resource-requires: no-cluster-admin
    app.kubernetes.io/component: grafana
  name: {{ default "grafana" .Values.grafana.name }}
spec:
  replicas: {{ .Values.grafana.replicaCount }}
  revisionHistoryLimit: {{ .Values.sourcegraph.revisionHistoryLimit }}
  selector:
    matchLabels:
      app: grafana
  serviceName: grafana
  updateStrategy:
     type: RollingUpdate
  template:
    metadata:
      {{- if .Values.sourcegraph.podAnnotations }}
      {{- toYaml .Values.sourcegraph.podAnnotations | nindent 8 }}
      {{- end }}
      {{- if .Values.grafana.podAnnotations }}
      {{- toYaml .Values.grafana.podAnnotations | nindent 8 }}
      {{- end }}
      labels:
      {{- if .Values.sourcegraph.podLabels }}
      {{- toYaml .Values.sourcegraph.podLabels | nindent 8 }}
      {{- end }}
      {{- if .Values.grafana.podLabels }}
      {{- toYaml .Values.grafana.podLabels | nindent 8 }}
      {{- end }}
        app: grafana
        deploy: sourcegraph
    spec:
      {{- with .Values.sourcegraph.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
      - name: grafana
        image: {{ include "sourcegraph.image" (list . "grafana") }}
        terminationMessagePolicy: FallbackToLogsOnError
        ports:
        - containerPort: 3370
          name: http
        volumeMounts:
        - mountPath: /var/lib/grafana
          name: grafana-data
        - mountPath: /sg_config_grafana/provisioning/datasources
          name: config
        # Grafana is relied upon to send alerts to site admins when something is wrong with
        # Sourcegraph, thus its memory requests and limits are the same to guarantee it has enough
        # memory to perform its job reliably and prevent conflicts with other pods on the same
        # host node.
        {{- if .Values.grafana.extraVolumeMounts }}
        {{- toYaml .Values.grafana.extraVolumeMounts | nindent 8 }}
        {{- end }}
        resources:
        {{- toYaml .Values.grafana.resources | nindent 10 }}
      serviceAccountName: grafana
      {{- if .Values.grafana.extraContainers }}
        {{- toYaml .Values.grafana.extraContainers | nindent 6 }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.grafana.podSecurityContext | nindent 8 }}
      {{- with .Values.sourcegraph.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.sourcegraph.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.sourcegraph.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
      - name: config
        configMap:
          defaultMode: 0777
          name: grafana
      {{- if .Values.grafana.extraVolumes }}
      {{- toYaml .Values.grafana.extraVolumes | nindent 6 }}
      {{- end }}
  volumeClaimTemplates:
  - metadata:
      name: grafana-data
    spec:
      accessModes: [ "ReadWriteOnce"]
      resources:
        requests:
          storage: {{ .Values.grafana.storageSize }}
      storageClassName: {{ .Values.storageClass.name }}

