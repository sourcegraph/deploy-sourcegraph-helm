### Common Configuration ###
sourcegraph:
  image:
    defaultTag: '{{ .Chart.AppVersion }}'
    pullPolicy: IfNotPresent
    repository: index.docker.io/sourcegraph
    useGlobalTagAsDefault: false # When true, sourcegraph.image.defaultTag is used as the default defaultTag for all services, instead of service-specific default defaultTags
  imagePullSecrets: []
  labels: {}
  revisionHistoryLimit: 10
  localDevMode: false # When true, remove all resource stanzas, allowing the scheduler to best-fit pods. Intended for local development with limited resources.

fullnameOverride: ""
nameOverride: ""

#
# Generic application configuration options
# app:
#   replicaCount: 1
#   image: {}

alpine: # Used in init containers
  image:
    defaultTag: insiders@sha256:b5716faa7c5d40542132176960ae2d5708a20a8dd5dcd1e63d41af4c27a1b0c4
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 999
    runAsGroup: 999
    readOnlyRootFilesystem: true
  resources:
    limits:
      cpu: 10m
      memory: 50Mi
    requests:
      cpu: 10m
      memory: 50Mi

cadvisor:
  enabled: true
  image:
    defaultTag: insiders@sha256:5c8cf42cbbc029d07b6f97b1543ed3d41fcd5f8c4c47693f3682b0ac48d03adb
  resources:
    limits:
      cpu: 300m
      memory: 2000Mi
    requests:
      cpu: 150m
      memory: 200Mi
  serviceAccount:
    create: true
    name: cadvisor

codeInsightsDB:
  enabled: true
  env:
    POSTGRES_PASSWORD: # Accessible by Sourcegraph applications on the network only, so password auth is not used.
      value: password
  existingConfig: "" # Name of an existing configmap
  image:
    defaultTag: insiders@sha256:aab2e4a00ccda36b3ecaf536c53ba5f57b909ada763094245da18a328531bc44
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 70
    runAsGroup: 70
    readOnlyRootFilesystem: true
  replicaCount: 1
  resources:
    limits:
      cpu: "4"
      memory: 2Gi
    requests:
      cpu: "4"
      memory: 2Gi
  securityContext:
    runAsUser: 70
    fsGroup: 70
    fsGroupChangePolicy: "OnRootMismatch"
  storageSize: 200Gi

codeIntelDB:
  enabled: true
  existingConfig: "" # Name of an existing configmap
  image:
    defaultTag: insiders@sha256:f5f40a0ea69dccc1c877b396ea4177ab06cf5c5090de0c88ca50460a192fdae8
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 999
    runAsGroup: 999
    readOnlyRootFilesystem: true
  postgresExporter:
    env:
      DATA_SOURCE_NAME:
        value: postgres://sg:@localhost:5432/?sslmode=disable
  replicaCount: 1
  resources:
    limits:
      cpu: "4"
      memory: 4Gi
    requests:
      cpu: "4"
      memory: 4Gi
  securityContext:
    runAsUser: 999
    fsGroup: 999
    fsGroupChangePolicy: "OnRootMismatch"
  storageSize: 200Gi

frontend:
  env:
    CODEINSIGHTS_PGDATASOURCE:
      value: postgres://postgres:password@codeinsights-db:5432/postgres
    CODEINTEL_PGDATABASE:
      value: sg
    CODEINTEL_PGHOST:
      value: codeintel-db
    CODEINTEL_PGPORT:
      value: "5432"
    CODEINTEL_PGSSLMODE:
      value: disable
    CODEINTEL_PGUSER:
      value: sg
    GRAFANA_SERVER_URL:
      value: http://grafana:30070
    JAEGER_SERVER_URL:
      value: http://jaeger-query:16686
    PGDATABASE:
      value: sg
    PGHOST:
      value: pgsql
    PGUSER:
      value: sg
    PROMETHEUS_URL:
      value: http://prometheus:30090
  image:
    defaultTag: insiders@sha256:f6b962027b6cdb4a1cdea2573d9dfd89f353e2efb5ac2c485bf086bfa01e7a93
  ingress:
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/proxy-body-size: 150m
    enabled: true
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true
  privileged: true # Creates Role instead of using existing roles
  replicaCount: 2
  resources:
    limits:
      cpu: "2"
      ephemeral-storage: 8Gi
      memory: 4G
    requests:
      cpu: "2"
      ephemeral-storage: 4Gi
      memory: 2G
  serviceAccount:
    create: true
    name: sourcegraph-frontend

githubProxy:
  image:
    defaultTag: insiders@sha256:b69f5523ff8540afb132db98f7577d220889728bf1054b65e2f679abb26d27f2
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true
  replicaCount: 1
  resources:
    limits:
      cpu: "1"
      memory: 1G
    requests:
      cpu: 100m
      memory: 250M

gitserver:
  image:
    defaultTag: insiders@sha256:c84868f42e832e7af5b56e68dedd49ade60c093de589ed3231b9f807b841073f
  labels: {}
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true
  replicaCount: 1
  resources:
    limits:
      cpu: "4"
      memory: 8G
    requests:
      cpu: "4"
      memory: 8G
  securityContext:
    runAsUser: 100
    runAsGroup: 101
    fsGroup: 101
    fsGroupChangePolicy: "OnRootMismatch"
  storageSize: 200Gi

grafana:
  enabled: true
  existingConfig: "" # Name of an existing configmap
  image:
    defaultTag: insiders@sha256:91adc7bf41b971b0c6e88eec5a2884d05531ee73cde3edd94f737f276d072d9d
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 472
    runAsGroup: 472
    readOnlyRootFilesystem: true
  replicaCount: 1
  resources:
    limits:
      cpu: "1"
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 512Mi
  securityContext:
    runAsUser: 472
    runAsGroup: 472
    fsGroup: 472
    fsGroupChangePolicy: "OnRootMismatch"
  serviceAccount:
    create: true
  storageSize: 2Gi

indexedSearch:
  image:
    defaultTag: insiders@sha256:1e220469361143daaa16f07cf4a3b0b40f2b311917c260e3b883beff7ed89d49
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true
  replicaCount: 1
  resources:
    limits:
      cpu: "2"
      memory: 4G
    requests:
      cpu: 500m
      memory: 2G
  securityContext:
    fsGroup: 101
    fsGroupChangePolicy: "OnRootMismatch"
  # The size of disk to used for search indexes.
  # This should typically be gitserver disk size multipled by the number of gitserver shards.
  storageSize: 200Gi

indexedSearchIndexer:
  image:
    defaultTag: insiders@sha256:32b46de3caa2fa37bb880ba6152d37bfe6b6efeb73cf36db4ae70c45d9b19f18
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true
  resources:
    # zoekt-indexserver is CPU bound. The more CPU you allocate to it, the
    # lower lag between a new commit and it being indexed for search.
    limits:
      cpu: "8"
      memory: 8G
    requests:
      cpu: "4"
      memory: 4G

minio:
  enabled: true
  env:
    MINIO_ACCESS_KEY:
      value: AKIAIOSFODNN7EXAMPLE
    MINIO_SECRET_KEY:
      value: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
  image:
    defaultTag: insiders@sha256:66925bab722ed11584e1135687b5c1e00a13c550e38d954a56048c90f17edc53
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
  replicaCount: 1
  resources:
    limits:
      cpu: "1"
      memory: 500M
    requests:
      cpu: "1"
      memory: 500M
  securityContext:
    runAsUser: 100
    runAsGroup: 101
    fsGroup: 101
    fsGroupChangePolicy: "OnRootMismatch"
  storageSize: 100Gi

pgsql:
  enabled: true
  env:
    DATA_SOURCE_NAME:
      value: postgres://sg:@localhost:5432/?sslmode=disable
    PG_EXPORTER_EXTEND_QUERY_PATH:
      value: /config/queries.yaml
  existingConfig: "" # Name of an existing configmap
  image:
    defaultTag: insiders@sha256:e4927ccbf208ec95ea463225936575b68dc4b547c4e61ff81818bf60db77f121
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 999
    runAsGroup: 999
    readOnlyRootFilesystem: true
  replicaCount: 1
  resources:
    limits:
      cpu: "4"
      memory: 4Gi
    requests:
      cpu: "4"
      memory: 4Gi
  securityContext:
    # Required to prevent escalations to root.
    runAsUser: 999
    runAsGroup: 999
    fsGroup: 999
    fsGroupChangePolicy: "OnRootMismatch"
  storageSize: 200Gi

postgresExporter:
  image:
    defaultTag: insiders@sha256:bae17598220d76969bfe9df40a6f27ec239c059ff5c24befa367bae2b2343f07
  resources:
    limits:
      cpu: 10m
      memory: 50Mi
    requests:
      cpu: 10m
      memory: 50Mi

preciseCodeIntel:
  env:
    NUM_WORKERS:
      value: "4"
  image:
    defaultTag: insiders@sha256:dd740c860b59a6d66fdb9546463696a342fe92563efc19e053a2002bedfa9ef8
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true
  replicaCount: 2
  resources:
    limits:
      cpu: "2"
      memory: 4G
    requests:
      cpu: 500m
      memory: 2G

prometheus:
  enabled: true
  existingConfig: "" # Name of an existing configmap
  image:
    defaultTag: insiders@sha256:6c73e4c2197d8ad2a4a5e74a6ba167aef9c45f16134aee48c727f4ae30b85a51
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 100
    readOnlyRootFilesystem: true
  privileged: true
  replicaCount: 1
  # Prometheus is relied upon to monitor services for sending alerts to site admins when
  # something is wrong with Sourcegraph, thus its memory requests and limits are the same to
  # guarantee it has enough memory to perform its job reliably and prevent conflicts with
  # other pods on the same host node.
  #
  # The limit chosen here is based on what works reliably on Sourcegraph.com with lots
  # of traffic.
  resources:
    limits:
      cpu: "2"
      memory: 6G
    requests:
      cpu: 500m
      memory: 6G
  securityContext:
    fsGroup: 100
    fsGroupChangePolicy: "OnRootMismatch"
  serviceAccount:
    create: true
  storageSize: 200Gi

redisCache:
  enabled: true
  image:
    defaultTag: insiders@sha256:a95a78f542be9f847457346c932fa38fbf0bd7267d7c66add4c76f058cdb544f
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 999
    runAsGroup: 1000
    readOnlyRootFilesystem: true
  replicaCount: 1
  resources:
    limits:
      cpu: "1"
      memory: 7Gi
    requests:
      cpu: "1"
      memory: 7Gi
  securityContext:
    fsGroup: 1000
    fsGroupChangePolicy: "OnRootMismatch"
  storageSize: 100Gi

redisExporter:
  image:
    defaultTag: 84464_2021-01-15_c2e4c28@sha256:f3f51453e4261734f08579fe9c812c66ee443626690091401674be4fb724da70
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 999
    runAsGroup: 1000
    readOnlyRootFilesystem: true
  resources:
    limits:
      cpu: 10m
      memory: 100Mi
    requests:
      cpu: 10m
      memory: 100Mi

redisStore:
  enabled: true
  image:
    defaultTag: insiders@sha256:17efaaf6eec605f412698a57527af694da20ae0b02853ea63a7393d8ec254bfc
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 999
    runAsGroup: 1000
    readOnlyRootFilesystem: true
  replicaCount: 1
  resources:
    limits:
      cpu: "1"
      memory: 7Gi
    requests:
      cpu: "1"
      memory: 7Gi
  securityContext:
    fsGroup: 1000
    fsGroupChangePolicy: "OnRootMismatch"
  storageSize: 100Gi

repoUpdater:
  image:
    defaultTag: insiders@sha256:17f485f5ea2c6e744ad4c3c94edca3e534952e118a1b210f91ce062a17cc8084
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true
  replicaCount: 1
  resources:
    limits:
      cpu: "1"
      memory: 2Gi
    requests:
      cpu: "1"
      memory: 500Mi

searcher:
  image:
    defaultTag: insiders@sha256:70093b5a262a58c0ee0adc0d2281a4dde559e2e63517cc3abc4cf13cbf3e2c3b
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true
  replicaCount: 2
  resources:
    limits:
      cpu: "2"
      ephemeral-storage: 26G
      memory: 2G
    requests:
      cpu: 500m
      ephemeral-storage: 25G
      memory: 500M

storageClass:
  create: true # Disable if you have your own existing storage class
  name: sourcegraph # Customize to the existing storage class name
  provisioner: kubernetes.io/gce-pd
  type: pd-ssd

symbols:
  image:
    defaultTag: insiders@sha256:05c0919114aa5daf23f33ab35719317864fbbeb66875ca2125accb11f388762f
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true
  replicaCount: 1
  resources:
    limits:
      cpu: "2"
      ephemeral-storage: 12G
      memory: 2G
    requests:
      cpu: 500m
      ephemeral-storage: 10G
      memory: 500M

syntectServer:
  image:
    defaultTag: insiders@sha256:79d1f2386fab9e8d67333e7153a1f5b080b17d9a0b076a2b5e7cfc6ea3e1347b
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true
  replicaCount: 1
  resources:
    limits:
      cpu: "4"
      memory: 6G
    requests:
      cpu: 250m
      memory: 2G

tracing:
  collector: {}
  enabled: true
  image:
    defaultTag: insiders@sha256:c0ac810023f675de10c0b3a9032d221ef43317d550bdf66b65c2642f4abb9d1b
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true
  query: {}
  replicaCount: 1
  resources:
    limits:
      cpu: "1"
      memory: 1G
    requests:
      cpu: 500m
      memory: 500M

tracingAgent:
  enabled: true
  image:
    defaultTag: insiders@sha256:7f89e86a138d1f9a6967fb7ec04a1ea6464d1c417265445c8e5858e87616e012
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true
  resources:
    limits:
      cpu: "1"
      memory: 500M
    requests:
      cpu: 100m
      memory: 100M

worker:
  image:
    defaultTag: insiders@sha256:147174fe1b99979f318105b6d23c9717444fe654e423b9e937ba26f4c12fde01
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true
  replicaCount: 1
  resources:
    limits:
      cpu: "2"
      memory: 4G
    requests:
      cpu: 500m
      memory: 2G
