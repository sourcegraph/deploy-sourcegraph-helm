---
suite: pgsqlAuth
templates:
- pgsql/pgsql.Secret.yaml
- pgsql/pgsql.StatefulSet.yaml
tests:
- it: should reference existing secret name when existingSecret is passed
  template: pgsql/pgsql.StatefulSet.yaml
  set:
    pgsql:
      auth:
        existingSecret: "my-secret"
  asserts:
      - equal:
          path: spec.template.spec.containers[0].env[0].name
          value: POSTGRES_DATABASE
      - equal:
          path: spec.template.spec.containers[0].env[0].valueFrom.secretKeyRef.name
          value: "my-secret"
      - equal:
          path: spec.template.metadata.annotations.[checksum/pgsql.secret]
          value: "e5de6930e808d2ef402f404c12b53ff96e57ac6818a72ed19ab0aa4caf588596"
- it: should not generate a secret when existingSecret is passed
  template: pgsql/pgsql.Secret.yaml
  set:
    pgsql:
      auth:
        existingSecret: "my-secret"
  asserts:
      - hasDocuments:
          count: 0
- it: should generate a secret when existingSecret is blank
  template: pgsql/pgsql.Secret.yaml
  set:
    pgsql:
      auth:
        existingSecret: ""
  asserts:
      - hasDocuments:
          count: 1
- it: should generate a secret by default
  template: pgsql/pgsql.Secret.yaml
  asserts:
      - hasDocuments:
          count: 1
- it: should use provided value in secret
  template: pgsql/pgsql.Secret.yaml
  set:
    pgsql:
      auth:
        password: "hello"
  asserts:
      - equal:
          path: data.password
          value: "aGVsbG8="
- it: should reference default secret name when existingSecret is blank
  template: pgsql/pgsql.StatefulSet.yaml
  asserts:
      - equal:
          path: spec.template.spec.containers[0].env[0].name
          value: POSTGRES_DATABASE
      - equal:
          path: spec.template.spec.containers[0].env[0].valueFrom.secretKeyRef.name
          value: "pgsql-auth"
      - equal:
          path: spec.template.metadata.annotations.[checksum/pgsql.secret]
          value: "180940fdb956526d197a8efaf15bc2f14a3db83e09610917f8b9040fa5232d39"
