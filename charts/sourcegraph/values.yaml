# To customize these values, use an override file:
# https://sourcegraph.com/github.com/sourcegraph/deploy-sourcegraph-helm/-/blob/charts/sourcegraph/README.md#customizations

### Common Configuration ###
sourcegraph:
  image:
    # -- Global docker image tag
    defaultTag: '{{ .Chart.AppVersion }}'
    # -- Global docker image pull policy
    pullPolicy: IfNotPresent
    # -- Global docker image registry or prefix
    repository: index.docker.io/sourcegraph
    # -- When set to true, sourcegraph.image.defaultTag is used as the default defaultTag for all services, instead of service-specific default defaultTags
    useGlobalTagAsDefault: false
  # -- Mount named secrets containing docker credentials
  imagePullSecrets: []
  # -- Add extra labels to all resources
  labels: {}
  # -- When true, remove all resource stanzas, allowing the scheduler to best-fit pods. Intended for local development with limited resources.
  localDevMode: false
  # -- Set a custom name for the app.kubernetes.io/name annotation
  nameOverride: ""
  # -- Global Affinity,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity)
  affinity: {}
  # -- Global NodeSelector,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector)
  nodeSelector: {}
  # -- Global Tolerations,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/)
  tolerations: []
  # -- Add extra annotations to attach to all pods
  podAnnotations: {}
  # -- Add extra labels to attach to all pods
  podLabels: {}
  # -- Global deployment clean up policy,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#clean-up-policy)
  revisionHistoryLimit: 10
  # -- Add extra labels to all services
  serviceLabels: {}


# Generic application configuration options, used by most applications below
# app: # Generally matches directory name
#   replicaCount: 1
#
#   image:
#     # Application-specific default tag. Overrides the global tag. Do not modify - use tag instead
#     defaultTag:
#     # Override the default tag on a service-specific basis
#     tag:
#     # Override the default docker image name
#     name:
#
#   # Add additional labels and annotations to various resources
#   labels: {}
#   podLabels: {}
#   podAnnotations: {}
#   serviceLabels: {}
#   serviceAnnotations: {}
#   # Provide custom environment variables
#   env: {}
#   # Set resource requests / limits
#   resources: {}
#   containerSecurityContext: {}
#   podSecurityContext: {}
#   # Add additional volumes and mounts to deployments
#   extraVolumeMounts: {}
#   extraVolumes: {}
#   # Add sidecars
#   extraContainers: {}
#   # Toggle serviceAccount creation
#   serviceAccount.create: true
#   # Customize service account name
#   serviceAccount.name: ""
#   # Override service type (defaults to ClusterIP)
#   serviceType: ""
#   # Set disk size on PVC's for stateful deployments
#   storageSize: ""
#   # Optionally bind PVC's to an existing PV
#   volumeName: ""
#   # Use an existing configmap (specified by name) instead of creating one
#   existingConfig: ""
#   # Toggle deployment of applications on/off. Applies to databases and third-party applications
#   enabled: true

alpine: # Used in init containers
  image:
    # -- Docker image tag for the `alpine` image
    defaultTag: 4.3.0@sha256:37eeb0877507d4b283e331b010ae103991825dd5baf67a294d5592aefb7d6500
    # -- Docker image name for the `alpine` image
    name: "alpine-3.14"
  # -- Security context for the `alpine` initContainer,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container)
  containerSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 999
    runAsGroup: 999
    readOnlyRootFilesystem: true
  # -- Resource requests & limits for the `alpine` initContainer,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)
  resources:
    limits:
      cpu: 10m
      memory: 50Mi
    requests:
      cpu: 10m
      memory: 50Mi

cadvisor:
  # -- Enable `cadvisor`
  enabled: true
  image:
    # -- Docker image tag for the `cadvisor` image
    defaultTag: 4.3.0@sha256:a96e536b268f8ab97a6ae7ffbcca2254cd30d214d80f00a17b0f09c425a55ebb
    # -- Docker image name for the `cadvisor` image
    name: "cadvisor"
  # -- Name used by resources. Does not affect service names or PVCs.
  name: "cadvisor"
  podSecurityPolicy:
    # -- Enable [PodSecurityPolicy](https://kubernetes.io/docs/concepts/policy/pod-security-policy/) for `cadvisor` pods
    enabled: false
  # -- Resource requests & limits for the `cadvisor` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)
  resources:
    limits:
      cpu: 300m
      memory: 2000Mi
    requests:
      cpu: 150m
      memory: 200Mi
  serviceAccount:
    # -- Enable creation of ServiceAccount for `cadvisor`
    create: true
    # -- Name of the ServiceAccount to be created or an existing ServiceAccount
    name: cadvisor
  # -- Security context for the `cadvisor` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container)
  containerSecurityContext:
    # You may set `privileged` to `false and `cadvisor` will run with reduced privileges.
    # `cadvisor` requires root privileges in order to display provisioning metrics.
    # These metrics provide critical information to help you scale the Sourcegraph deployment.
    # If you would like to bring your own infrastructure monitoring & alerting solution,
    # you may want to disable the `cadvisor` DaemonSet completely
    # by setting `cadvisor.enabled=false` in your override file
    # You may also run `cadvisor` with reduced privileges by setting
    # `cadvisor.containerSecurityContext.privileged=false` in your override file
    privileged: true

codeInsightsDB:
  # -- Enable `codeinsights-db` PostgreSQL server
  enabled: true
  auth:
    # -- Name of existing secret to use for Code Insights credentials
    # The secret must contain the keys `user`, `password`, `database`, `host` and `port`.
    # `auth.user`, `auth.password`, etc. are ignored if this is enabled
    existingSecret: ""
    # -- Sets codeinsights-db database name
    database: "postgres"
    # -- Sets codeinsights-db host
    host: "codeinsights-db"
    # -- Sets codeinsights-db username
    user: "postgres"
    # -- Sets codeinsights-db password
    password: "password"
    # -- Sets codeinsights-db port
    port: "5432"
  # -- Environment variables for the `codeinsights-db` container
  env: {}
  # -- Name of existing ConfigMap for `codeinsights-db`. It must contain a `postgresql.conf` key.
  existingConfig: "" # Name of an existing configmap
  # -- Additional PostgreSQL configuration. This will override or extend our default configuration.
  # Notes: This is expecting a multiline string.
  # Learn more from our [recommended PostgreSQL configuration](https://docs.sourcegraph.com/admin/config/postgres-conf) and [PostgreSQL documentation](https://www.postgresql.org/docs/12/config-setting.html)
  additionalConfig: ""
  image:
    # -- Docker image tag for the `codeinsights-db` image
    defaultTag: 4.3.0@sha256:6c1a749f3c8d0c4dd3a251475daf3606cfc8ca366e3302af4ea8fab670484167
    # -- Docker image name for the `codeinsights-db` image
    name: "codeinsights-db"
  # -- Security context for the `codeinsights-db` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container)
  containerSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 70
    runAsGroup: 70
    readOnlyRootFilesystem: true
  init:
    # -- Security context for the `alpine` initContainer,
    # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container)
    containerSecurityContext:
      allowPrivilegeEscalation: false
      runAsUser: 70
      runAsGroup: 70
      readOnlyRootFilesystem: true
  # -- Configuration for the `pgsql-exporter` sidecar container
  postgresExporter: {}
  # -- Name used by resources. Does not affect service names or PVCs.
  name: "codeinsights-db"
  # -- Resource requests & limits for the `codeinsights-db` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)
  resources:
    limits:
      cpu: "4"
      memory: 2Gi
    requests:
      cpu: "4"
      memory: 2Gi
  # -- Security context for the `codeinsights-db` pod,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod)
  podSecurityContext:
    runAsUser: 70
    fsGroup: 70
    fsGroupChangePolicy: "OnRootMismatch"
  serviceAccount:
    # -- Enable creation of ServiceAccount for `codeinsights-db`
    create: false
    # -- Name of the ServiceAccount to be created or an existing ServiceAccount
    name: ""
  # -- PVC Storage Request for `codeinsights-db` data volume
  storageSize: 200Gi

codeIntelDB:
  # -- Enable `codeintel-db` PostgreSQL server
  enabled: true
  auth:
    # -- Name of existing secret to use for CodeIntel credentials
    # The secret must contain the keys `user`, `password`, `database`, `host` and `port`.
    # `auth.user`, `auth.password`, etc. are ignored if this is enabled
    existingSecret: ""
    # -- Sets codeintel-db database name
    database: "sg"
    # -- Sets codeintel-db host
    host: "codeintel-db"
    # -- Sets codeintel-db username
    user: "sg"
    # -- Sets codeintel-db password
    password: "password"
    # -- Sets codeintel-db port
    port: "5432"
  # -- Name of existing ConfigMap for `codeintel-db`. It must contain a `postgresql.conf` key
  existingConfig: ""
  # -- Additional PostgreSQL configuration. This will override or extend our default configuration.
  # Notes: This is expecting a multiline string.
  # Learn more from our [recommended PostgreSQL configuration](https://docs.sourcegraph.com/admin/config/postgres-conf) and [PostgreSQL documentation](https://www.postgresql.org/docs/12/config-setting.html)
  additionalConfig: ""
  image:
    # -- Docker image tag for the `codeintel-db` image
    defaultTag: 4.3.0@sha256:7dcc028e64c965bee399011605857b77478a46c2b7b7a67c2b0986263986f2cc
    # -- Docker image name for the `codeintel-db` image
    name: "codeintel-db"
  # -- Security context for the `codeintel-db` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container)
  containerSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 999
    runAsGroup: 999
    readOnlyRootFilesystem: true
  # -- Configuration for the `pgsql-exporter` sidecar container
  postgresExporter: {}
  # -- Name used by resources. Does not affect service names or PVCs.
  name: "codeintel-db"
  # -- Resource requests & limits for the `codeintel-db` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)
  resources:
    limits:
      cpu: "4"
      memory: 4Gi
    requests:
      cpu: "4"
      memory: 4Gi
  # -- Security context for the `codeintel-db` pod,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod)
  podSecurityContext:
    runAsUser: 999
    fsGroup: 999
    fsGroupChangePolicy: "OnRootMismatch"
  serviceAccount:
    # -- Enable creation of ServiceAccount for `codeintel-db`
    create: false
    # -- Name of the ServiceAccount to be created or an existing ServiceAccount
    name: ""
  # -- PVC Storage Request for `codeintel-db` data volume
  storageSize: 200Gi

frontend:
  # -- Environment variables for the `frontend` container
  # @default -- the chart will add some default environment values
  env:
    DEPLOY_TYPE:
      value: helm
    GRAFANA_SERVER_URL:
      value: http://grafana:30070
    JAEGER_SERVER_URL:
      value: http://jaeger-query:16686
    PROMETHEUS_URL:
      value: http://prometheus:30090
  image:
    # -- Docker image tag for the `frontend` image
    defaultTag: 4.3.0@sha256:30a25c9ac727e637a295e41e5ba8265e11cfb65e84768458a6aa123d3eb3cd90
    # -- Docker image name for the `frontend` image
    name: "frontend"
  ingress:
    # -- Enable ingress for the Sourcegraph server
    enabled: true
    # -- Annotations for the Sourcegraph server ingress. For example, securing ingress with TLS provided by [cert-manager](https://cert-manager.io/docs/usage/ingress/)
    annotations:
      # --  [Deprecated annotation](https://kubernetes.io/docs/concepts/services-networking/ingress/#deprecated-annotation) for specifing the IngressClass in Kubernetes 1.17 and earlier.
      # If you are using Kubernetes 1.18+, use `ingressClassName` instead and set an override value of `null` for this annotation.
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/proxy-body-size: 150m
    # -- External hostname for the Sourcegraph server ingress (SSL)
    host: ""
    # -- IngressClassName for the Ingress (Available in Kubernetes 1.18+)
    # If you set this field, set the annotation `frontend.ingress.annotations."kubernetes.io/ingress.class"` to `null`
    ingressClassName: null
    # -- Secret containing SSL cert
    tlsSecret: ""
  # -- Security context for the `frontend` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container)
  containerSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true
  # -- Security context for the `frontend` pod,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod)
  podSecurityContext: {}
  # -- Enable creation of Role and RoleBinding (RBAC). Uses [view](https://kubernetes.io/docs/reference/access-authn-authz/rbac/#user-facing-roles) ClusterRole if set to false
  privileged: true
  # -- Number of `frontend` pod
  replicaCount: 2
  # -- Name used by resources. Does not affect service names or PVCs.
  name: "sourcegraph-frontend"
  # -- Resource requests & limits for the `frontend` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)
  resources:
    limits:
      cpu: "2"
      ephemeral-storage: 8Gi
      memory: 4G
    requests:
      cpu: "2"
      ephemeral-storage: 4Gi
      memory: 2G
  serviceAccount:
    # -- Enable creation of ServiceAccount for `frontend`
    create: true
    # -- Name of the ServiceAccount to be created or an existing ServiceAccount
    name: sourcegraph-frontend

migrator:
  # -- Enable [migrator](https://docs.sourcegraph.com/admin/how-to/manual_database_migrations) initContainer in
  # `frontend` deployment to perform database migration
  enabled: true
  image:
    # -- Docker image tag for the `migrator` image
    defaultTag: 4.3.0@sha256:c57cc926ff6fb6ad798e5a3f9278e69994c0c204793fac7e1d5d20e0390ef401
    # -- Docker image name for the `migrator` image
    name: "migrator"
  # -- Environment variables for the `migrator` container
  env: {}
  # -- Resource requests & limits for the `migrator` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)
  resources:
    limits:
      cpu: 500m
      memory: 100M
    requests:
      cpu: 100m
      memory: 50M
  # -- Security context for the `migrator` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container)
  containerSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true

githubProxy:
  image:
    # -- Docker image tag for the `github-proxy` image
    defaultTag: 4.3.0@sha256:92d95bdb6eb984c0f254b63ad315d590b8a1e91fa6b4c88d638f2585a7e18238
    # -- Docker image name for the `github-proxy` image
    name: "github-proxy"
  # -- Security context for the `github-proxy` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container)
  containerSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true
  # -- Name used by resources. Does not affect service names or PVCs.
  name: "github-proxy"
  # -- Security context for the `github-proxy` pod,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod)
  podSecurityContext: {}
  # -- Resource requests & limits for the `github-proxy` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)
  resources:
    limits:
      cpu: "1"
      memory: 1G
    requests:
      cpu: 100m
      memory: 250M
  serviceAccount:
    # -- Enable creation of ServiceAccount for `github-proxy`
    create: false
    # -- Name of the ServiceAccount to be created or an existing ServiceAccount
    name: ""

gitserver:
  image:
    # -- Docker image tag for the `gitserver` image
    defaultTag: 4.3.0@sha256:1110a967ff911c009d0a1c8c0282855083f4bb472836ff4047079fca34201a87
    # -- Docker image name for the `gitserver` image
    name: "gitserver"
  # -- Name of existing Secret that contains SSH credentials to clone repositories.
  # It usually contains keys, such as `id_rsa` (private key) and `known_hosts`.
  # Learn more from [documentation](https://docs.sourcegraph.com/admin/install/kubernetes/helm#using-ssh-to-clone-repositories)
  sshSecret: ""
  # -- Security context for the `gitserver` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container)
  containerSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true
  # -- Number of `gitserver` pod
  replicaCount: 1
  # -- Resource requests & limits for the `gitserver` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)
  resources:
    limits:
      cpu: "4"
      memory: 8G
    requests:
      cpu: "4"
      memory: 8G
  # -- Name used by resources. Does not affect service names or PVCs.
  name: "gitserver"
  # -- Security context for the `gitserver` pod,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod)
  podSecurityContext:
    runAsUser: 100
    runAsGroup: 101
    fsGroup: 101
    fsGroupChangePolicy: "OnRootMismatch"
  serviceAccount:
    # -- Enable creation of ServiceAccount for `gitserver`
    create: false
    # -- Name of the ServiceAccount to be created or an existing ServiceAccount
    name: ""
  # -- PVC Storage Request for `gitserver` data volume
  storageSize: 200Gi

grafana:
  # -- Enable `grafana` dashboard (recommended)
  enabled: true
  # -- Name of existing ConfigMap for `grafana`. It must contain a `datasources.yml` key.
  existingConfig: "" # Name of an existing configmap
  image:
    # -- Docker image tag for the `grafana` image
    defaultTag: 4.3.0@sha256:740768788d455e5ca7c0199f1761d9c5040b3636523e21f7ed499cf38b96a09f
    # -- Docker image name for the `grafana` image
    name: "grafana"
  # -- Security context for the `grafana` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container)
  containerSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 472
    runAsGroup: 472
    readOnlyRootFilesystem: true
  # -- Name used by resources. Does not affect service names or PVCs.
  name: "grafana"
  # -- Number of `grafana` pod
  replicaCount: 1
  # -- Resource requests & limits for the `grafana` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)
  resources:
    limits:
      cpu: "1"
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 512Mi
  # -- Security context for the `grafana` pod,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod)
  podSecurityContext:
    runAsUser: 472
    runAsGroup: 472
    fsGroup: 472
    fsGroupChangePolicy: "OnRootMismatch"
  serviceAccount:
    # -- Enable creation of ServiceAccount for `grafana`
    create: true
    # -- Name of the ServiceAccount to be created or an existing ServiceAccount
    name: grafana
  # -- PVC Storage Request for `grafana` data volume
  storageSize: 2Gi

indexedSearch:
  image:
    # -- Docker image tag for the `zoekt-webserver` image
    defaultTag: 4.3.0@sha256:895ba6f96e2071b2c8b5298fe3078cb525aa2aba181810826a77446dcb06c8bc
    # -- Docker image name for the `zoekt-webserver` image
    name: "indexed-searcher"
  # -- Security context for the `zoekt-webserver` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container)
  containerSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true
  # -- Name used by resources. Does not affect service names or PVCs.
  name: "indexed-search"
  # -- Number of `indexed-search` pod
  replicaCount: 1
  # -- Resource requests & limits for the `zoekt-webserver` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)
  resources:
    limits:
      cpu: "2"
      memory: 4G
    requests:
      cpu: 500m
      memory: 2G
  # -- Security context for the `indexed-search` pod,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod)
  podSecurityContext:
    fsGroup: 101
    fsGroupChangePolicy: "OnRootMismatch"
  serviceAccount:
    # -- Enable creation of ServiceAccount for `indexed-search`
    create: false
    # -- Name of the ServiceAccount to be created or an existing ServiceAccount
    name: ""
  # -- PVC Storage Request for `indexed-search` data volume
  # The size of disk to used for search indexes.
  # This should typically be gitserver disk size multipled by the number of gitserver shards.
  storageSize: 200Gi

indexedSearchIndexer:
  image:
    # -- Docker image tag for the `zoekt-indexserver` image
    defaultTag: 4.3.0@sha256:e2b77ea9fec50e32cce2c1b8909bfc70986e514a7edc0973a2757be656b91485
    # -- Docker image name for the `zoekt-indexserver` image
    name: "search-indexer"
  # -- Security context for the `zoekt-indexserver` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container)
  containerSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true
  # -- Resource requests & limits for the `zoekt-indexserver` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)
  # zoekt-indexserver is CPU bound. The more CPU you allocate to it, the
  # lower lag between a new commit and it being indexed for search.
  resources:
    limits:
      cpu: "8"
      memory: 8G
    requests:
      cpu: "4"
      memory: 4G

blobstore:
  # -- Enable `blobstore` (S3 compatible storage)
  enabled: true
  image:
    # -- Docker image tag for the `blobstore` image
    defaultTag: 4.3.0@sha256:94722bbe55c15cd533cf1c27bd0bb24f01e78caf61513deb9e6da73742e3075b
    # -- Docker image name for the `blobstore` image
    name: "blobstore"
  # -- Security context for the `blobstore` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container)
  containerSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
  # -- Name used by resources. Does not affect service names or PVCs.
  name: "blobstore"
  # -- Resource requests & limits for the `blobstore` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)
  resources:
    limits:
      cpu: "1"
      memory: 500M
    requests:
      cpu: "1"
      memory: 500M
  # -- Security context for the `blobstore` pod,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod)
  podSecurityContext:
    runAsUser: 100
    runAsGroup: 101
    fsGroup: 101
    fsGroupChangePolicy: "OnRootMismatch"
  serviceAccount:
    # -- Enable creation of ServiceAccount for `blobstore`
    create: false
    # -- Name of the ServiceAccount to be created or an existing ServiceAccount
    name: ""
  # -- PVC Storage Request for `blobstore` data volume
  storageSize: 100Gi

openTelemetry:
  enabled: true
  image:
    # -- Docker image tag for the `otel-collector` image
    defaultTag: 4.3.0@sha256:f568ae84287b23dde7ade138bf8f924f3db0b0af0386290d6c6bb8295a684ac6 # TODO: change once we have a versioned image with bundled configs + logging exporter
    # -- Docker image name for the `otel-collector` image
    name: "opentelemetry-collector"
  gateway:
    # -- Name used by resources. Does not affect service names or PVCs.
    name: "otel-collector"
    # -- Resource requests & limits for the `otel-collector` container,
    # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)
    resources:
      limits:
        cpu: "3"
        memory: 3Gi
      requests:
        cpu: "1"
        memory: 1Gi
    config:
      traces:
        # -- Define trace processors.
        # Read how to configure sampling in the [OpenTelemetry documentation](https://docs.sourcegraph.com/admin/observability/opentelemetry#sampling-traces)
        processors: {}
        # -- Define where traces should be exported to. 
        # Read how to configure different backends in the [OpenTelemetry documentation](https://opentelemetry.io/docs/collector/configuration/#exporters)
        exporters: {}
        # -- Define the name of a preexisting secret containing TLS certificates for exporters, which will be mounted under "/tls".
        # Read more about TLS configuration of exporters in the [OpenTelemetry Collector documentation](https://github.com/open-telemetry/opentelemetry-collector/blob/main/config/configtls/README.md)
        exportersTlsSecretName: ""
      
  agent:
    # -- Name used by resources. Does not affect service names or PVCs.
    name: "otel-agent"
    # -- Resource requests & limits for the `otel-agent` container,
    # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)
    resources:
      limits:
        cpu: "500m"
        memory: 500Mi
      requests:
        cpu: "100m"
        memory: 100Mi

nodeExporter:
  # -- Enable `node-exporter`
  enabled: true
  image:
    # -- Docker image tag for the `node-exporter` image
    defaultTag: 4.3.0@sha256:2d9dcdf0b2226f0c3d550a64d2667710265462350a3ba9ebe37d0302bc64af0f
    # -- Docker image name for the `node-exporter` image
    name: "node-exporter"
  # -- Name used by resources. Does not affect service names or PVCs.
  name: "node-exporter"
  podSecurityPolicy:
    # -- Enable [PodSecurityPolicy](https://kubernetes.io/docs/concepts/policy/pod-security-policy/) for `node-exporter` pods
    enabled: false
  # -- Resource requests & limits for the `node-exporter` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)
  resources:
    limits:
      cpu: '1'
      memory: 1Gi
    requests:
      cpu: '.2'
      memory: 100Mi
  serviceAccount:
    # -- Enable creation of ServiceAccount for `node-exporter`
    create: false
    # -- Name of the ServiceAccount to be created or an existing ServiceAccount
    name: node-exporter
  # Share the host process ID namespace. 
  hostPID: true
  ## Additional container arguments for the node-exporter container
  extraArgs: []
  #   - --collector.diskstats.ignored-devices=^(ram|loop|fd|(h|s|v)d[a-z]|nvme\\d+n\\d+p)\\d+$
  #   - --collector.textfile.directory=/run/prometheus
  # -- Security context for the `node-exporter` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container)
  containerSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 65534
    runAsGroup: 65534
    readOnlyRootFilesystem: true
  # -- Security context for the `node-exporter` pod,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod)
  podSecurityContext:
    fsGroup: 65534
    runAsGroup: 65534
    runAsNonRoot: true
    runAsUser: 65534
    
pgsql:
  # -- Enable `pgsql` PostgreSQL server
  enabled: true
  auth:
    # -- Name of existing secret to use for Postgres credentials
    # The secret must contain the keys `user`, `password`, `database`, `host` and `port`.
    # `auth.user`, `auth.password`, etc. are ignored if this is enabled
    existingSecret: ""
    # -- Sets postgres database name
    database: "sg"
    # -- Sets postgres host
    host: "pgsql"
    # -- Sets postgres username
    user: "sg"
    # -- Sets postgres password
    password: "password"
    # -- Sets postgres port
    port: "5432"
  # -- Name of existing ConfigMap for `pgsql`. It must contain a `postgresql.conf` key
  existingConfig: "" # Name of an existing configmap
  # -- Additional PostgreSQL configuration. This will override or extend our default configuration.
  # Notes: This is expecting a multiline string.
  # Learn more from our [recommended PostgreSQL configuration](https://docs.sourcegraph.com/admin/config/postgres-conf) and [PostgreSQL documentation](https://www.postgresql.org/docs/12/config-setting.html)
  additionalConfig: ""
  image:
    # -- Docker image tag for the `pgsql` image
    defaultTag: 4.3.0@sha256:ae0f6c80c28673be52af2526feecfdee114288d179997d3f84f401efb4f99105
    # -- Docker image name for the `pgsql` image
    name: "postgres-12-alpine"
  # -- Security context for the `pgsql` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container)
  containerSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 999
    runAsGroup: 999
    readOnlyRootFilesystem: true
  # -- Configuration for the `pgsql-exporter` sidecar container
  postgresExporter: {}
  # -- Name used by resources. Does not affect service names or PVCs.
  name: "pgsql"
  # -- Resource requests & limits for the `pgsql` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)
  resources:
    limits:
      cpu: "4"
      memory: 4Gi
    requests:
      cpu: "4"
      memory: 4Gi
  # -- Security context for the `pgsql` pod,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod)
  podSecurityContext:
    # Required to prevent escalations to root.
    runAsUser: 999
    runAsGroup: 999
    fsGroup: 999
    fsGroupChangePolicy: "OnRootMismatch"
  serviceAccount:
    # -- Enable creation of ServiceAccount for `pgsql`
    create: false
    # -- Name of the ServiceAccount to be created or an existing ServiceAccount
    name: ""
  # -- PVC Storage Request for `pgsql` data volume
  storageSize: 200Gi

postgresExporter:
  image:
    # -- Docker image tag for the `pgsql-exporter` image
    defaultTag: 4.3.0@sha256:8021c2ff234dc2f4ed875adb9033249ea2f1cce7c825ec58c2b8aa2978e315b7
    # -- Docker image name for the `pgsql-exporter` image
    name: "postgres_exporter"
  # -- Resource requests & limits for the `pgsql-exporter` sidecar container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)
  resources:
    limits:
      cpu: 10m
      memory: 50Mi
    requests:
      cpu: 10m
      memory: 50Mi

preciseCodeIntel:
  # -- Environment variables for the `precise-code-intel-worker` container
  env:
    NUM_WORKERS:
      value: "4"
  image:
    # -- Docker image tag for the `precise-code-intel-worker` image
    defaultTag: 4.3.0@sha256:149c7f078a1c1b13dc881db5246e4a933aa1799b8f3c06e2c66c398aaf873f12
    # -- Docker image name for the `precise-code-intel-worker` image
    name: "precise-code-intel-worker"
  # -- Security context for the `precise-code-intel-worker` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container)
  containerSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true
  # -- Name used by resources. Does not affect service names or PVCs.
  name: "precise-code-intel-worker"
  # -- Security context for the `precise-code-intel-worker` pod,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod)
  podSecurityContext: {}
  # -- Number of `precise-code-intel-worker` pod
  replicaCount: 2
  # -- Resource requests & limits for the `precise-code-intel-worker` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)
  resources:
    limits:
      cpu: "2"
      memory: 4G
    requests:
      cpu: 500m
      memory: 2G
  serviceAccount:
    # -- Enable creation of ServiceAccount for `precise-code-intel-worker`
    create: false
    # -- Name of the ServiceAccount to be created or an existing ServiceAccount
    name: ""

prometheus:
  # -- Enable `prometheus` (recommended)
  enabled: true
  # -- Name of existing ConfigMap for `pgsql`. It must contain a `prometheus.yml` key
  existingConfig: "" # Name of an existing configmap
  image:
    # -- Docker image tag for the `prometheus` image
    defaultTag: 4.3.0@sha256:3e5487bb48b1b4dfe03d084b7984aa9520cec6148eeaa6b9b171a412887575ef
    # -- Docker image name for the `prometheus` image
    name: "prometheus"
  # -- Security context for the `prometheus` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container)
  containerSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 100
    # Read-only filesystem not supported for the prometheus container,
    # see [sourcegraph/issues/34012](https://github.com/sourcegraph/sourcegraph/issues/34012) for more information
    readOnlyRootFilesystem: false
  # -- Name used by resources. Does not affect service names or PVCs.
  name: "prometheus"
  # -- Enable RBAC for `prometheus`
  privileged: true
  # -- Number of `prometheus` pod
  replicaCount: 1
  # -- Resource requests & limits for the `prometheus` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)
  # Prometheus is relied upon to monitor services for sending alerts to site admins when
  # something is wrong with Sourcegraph, thus its memory requests and limits are the same to
  # guarantee it has enough memory to perform its job reliably and prevent conflicts with
  # other pods on the same host node.
  #
  # The limit chosen here is based on what works reliably on Sourcegraph.com with lots
  # of traffic.
  resources:
    limits:
      cpu: "2"
      memory: 6G
    requests:
      cpu: 500m
      memory: 6G
  # -- Security context for the `prometheus` pod,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod)
  podSecurityContext:
    fsGroup: 100
    fsGroupChangePolicy: "OnRootMismatch"
  serviceAccount:
    # -- Enable creation of ServiceAccount
    create: true
    # -- Name of the ServiceAccount to be created or an existing ServiceAccount
    name: prometheus
  # -- PVC Storage Request for `prometheus` data volume
  storageSize: 200Gi

redisCache:
  # -- Enable `redis-cache` Redis server
  enabled: true
  image:
    # -- Docker image tag for the `redis-cache` image
    defaultTag: 4.3.0@sha256:4584f549ebe301b286b4faf43de81d35a1d3277bd66e87bb218675a31b898442
    # -- Docker image name for the `redis-cache` image
    name: "redis-cache"
  connection:
    # -- Name of existing secret to use for Redis endpoint
    # The secret must contain the key `endpoint` and should follow IANA specification
    # learn more from the [Helm docs](https://docs.sourcegraph.com/admin/install/kubernetes/helm#using-external-redis-instances)
    existingSecret: ""
    # -- Endpoint to use for redis-cache. Supports either host:port or IANA specification
    endpoint: "redis-cache:6379"
  # -- Security context for the `redis-cache` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container)
  containerSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 999
    runAsGroup: 1000
    readOnlyRootFilesystem: true
  # -- Resource requests & limits for the `redis-cache` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)
  resources:
    limits:
      cpu: "1"
      memory: 7Gi
    requests:
      cpu: "1"
      memory: 7Gi
  # -- Name used by resources. Does not affect service names or PVCs.
  name: "redis-cache"
  # -- Security context for the `redis-cache` pod,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod)
  podSecurityContext:
    fsGroup: 1000
    fsGroupChangePolicy: "OnRootMismatch"
  serviceAccount:
    # -- Enable creation of ServiceAccount for `redis-cache`
    create: false
    # -- Name of the ServiceAccount to be created or an existing ServiceAccount
    name: ""
  # -- PVC Storage Request for `redis-cache` data volume
  storageSize: 100Gi

redisExporter:
  image:
    # -- Docker image tag for the `redis-exporter` image
    defaultTag: 4.3.0@sha256:edb0c9b19cacd90acc78f13f0908a7e6efd1df704e401805c24bffd241285f70
    # -- Docker image name for the `redis-exporter` image
    name: "redis_exporter"
  # -- Security context for the `redis-exporter` sidecar container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container)
  containerSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 999
    runAsGroup: 1000
    readOnlyRootFilesystem: true
  # -- Resource requests & limits for the `redis-exporter` sidecar container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)
  resources:
    limits:
      cpu: 10m
      memory: 100Mi
    requests:
      cpu: 10m
      memory: 100Mi

redisStore:
  # -- Enable `redis-store` Redis server
  enabled: true
  connection:
    # -- Name of existing secret to use for Redis endpoint
    # The secret must contain the key `endpoint` and should follow IANA specification
    # learn more from the [Helm docs](https://docs.sourcegraph.com/admin/install/kubernetes/helm#using-external-redis-instances)
    existingSecret: ""
    # -- Endpoint to use for redis-store. Supports either host:port or IANA specification
    endpoint: "redis-store:6379"
  image:
    # -- Docker image tag for the `redis-store` image
    defaultTag: 4.3.0@sha256:23bbfe192c98fdd8597974a598f268eb715e79937c2df71b803d52691c3d8e8f
    # -- Docker image name for the `redis-store` image
    name: "redis-store"
  # -- Security context for the `redis-store` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container)
  containerSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 999
    runAsGroup: 1000
    readOnlyRootFilesystem: true
  # -- Resource requests & limits for the `redis-store` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)
  resources:
    limits:
      cpu: "1"
      memory: 7Gi
    requests:
      cpu: "1"
      memory: 7Gi
  # -- Name used by resources. Does not affect service names or PVCs.
  name: "redis-store"
  # -- Security context for the `redis-store` pod,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod)
  podSecurityContext:
    fsGroup: 1000
    fsGroupChangePolicy: "OnRootMismatch"
  serviceAccount:
    # -- Enable creation of ServiceAccount for `redis-store`
    create: false
    # -- Name of the ServiceAccount to be created or an existing ServiceAccount
    name: ""
  # -- PVC Storage Request for `redis-store` data volume
  storageSize: 100Gi

repoUpdater:
  image:
    # -- Docker image tag for the `repo-updater` image
    defaultTag: 4.3.0@sha256:3640ecfe6e8977a47e4c2b551fabf07693acd6db31a183b4c9745cd9cffbafde
    # -- Docker image name for the `repo-updater` image
    name: "repo-updater"
  # -- Security context for the `repo-updater` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container)
  containerSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true
  # -- Name used by resources. Does not affect service names or PVCs.
  name: "repo-updater"
  # -- Security context for the `repo-updater` pod,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod)
  podSecurityContext: {}
  # -- Resource requests & limits for the `repo-updater` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)
  resources:
    limits:
      cpu: "1"
      memory: 2Gi
    requests:
      cpu: "1"
      memory: 500Mi
  serviceAccount:
    # -- Enable creation of ServiceAccount for `repo-updater`
    create: false
    # -- Name of the ServiceAccount to be created or an existing ServiceAccount
    name: ""

searcher:
  image:
    # -- Docker image tag for the `searcher` image
    defaultTag: 4.3.0@sha256:c6e33eb6dd970b31c7f1c9a095bf9a6b8dac3c4f24040df8a14d341c66437a6d
    # -- Docker image name for the `searcher` image
    name: "searcher"
  # -- Security context for the `searcher` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container)
  containerSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true
  # -- Security context for the `searcher` pod,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod)
  podSecurityContext: {}
  # -- Name used by resources. Does not affect service names or PVCs.
  name: "searcher"
  # -- Number of `searcher` pod
  replicaCount: 2
  # -- Resource requests & limits for the `searcher` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)
  resources:
    limits:
      cpu: "2"
      ephemeral-storage: 26G
      memory: 2G
    requests:
      cpu: 500m
      ephemeral-storage: 25G
      memory: 500M
  serviceAccount:
    # -- Enable creation of ServiceAccount for `searcher`
    create: false
    # -- Name of the ServiceAccount to be created or an existing ServiceAccount
    name: ""

storageClass:
  # -- Enable creation of storageClass.
  # Disable if you have your own existing storage class
  create: true
  # -- Name of the storageClass.
  # Use to customize to the existing storage class name
  name: sourcegraph
  # -- Name of the storageClass provisioner,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/concepts/storage/storage-classes/#provisioner)
  # and consult your cloud provider persistent storage documentation
  provisioner: kubernetes.io/gce-pd
  # -- Value of `type` key in storageClass `parameters`,
  # consult your cloud provider persistent storage documentation
  type: pd-ssd
  # -- Extra parameters of storageClass,
  # consult your cloud provider persistent storage documentation
  parameters: {}
  # -- Persistent volumes topology configuration,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/concepts/storage/storage-classes/#allowed-topologies)
  allowedTopologies: {}

symbols:
  image:
    # -- Docker image tag for the `symbols` image
    defaultTag: 4.3.0@sha256:cc0d5114beddfd1e9a8bb1b39cab2f840b3207c435a0996ace0de3245bf3d960
    # -- Docker image name for the `symbols` image
    name: "symbols"
  # -- Security context for the `symbols` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container)
  containerSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true
  # -- Security context for the `symbols` pod,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod)
  podSecurityContext: {}
  # -- Name used by resources. Does not affect service names or PVCs.
  name: "symbols"
  # -- Number of `symbols` pod
  replicaCount: 1
  # -- Resource requests & limits for the `symbols` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)
  resources:
    limits:
      cpu: "2"
      ephemeral-storage: 12G
      memory: 2G
    requests:
      cpu: 500m
      ephemeral-storage: 10G
      memory: 500M
  serviceAccount:
    # -- Enable creation of ServiceAccount for `symbols`
    create: false
    # -- Name of the ServiceAccount to be created or an existing ServiceAccount
    name: ""

syntectServer:
  image:
    # -- Docker image tag for the `syntect-server` image
    defaultTag: 4.3.0@sha256:af59a8f92e578a55f293db130954b5d36811b85cf9a0043eb2ec7be6eda6bbe8
    # -- Docker image name for the `syntect-server` image
    name: "syntax-highlighter"
  # -- Security context for the `syntect-server` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container)
  containerSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true
  # -- Name used by resources. Does not affect service names or PVCs.
  name: "syntect-server"
  # -- Security context for the `syntect-server` pod,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod)
  podSecurityContext: {}
  # -- Number of `syntect-server` pod
  replicaCount: 1
  # -- Resource requests & limits for the `syntect-server` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)
  resources:
    limits:
      cpu: "4"
      memory: 6G
    requests:
      cpu: 250m
      memory: 2G
  serviceAccount:
    # -- Enable creation of ServiceAccount for `syntect-server`
    create: false
    # -- Name of the ServiceAccount to be created or an existing ServiceAccount
    name: ""

jaeger:
  collector:
    # -- Name of jaeger `collector` service 
    name: ""
    # -- Add extra annotations to jaeger `collector` service
    serviceAnnotations: {}
    # -- Add extra labels to jaeger `collector` service
    serviceLabels: {}
    # -- Kubernetes service type of jaeger `collector` service,
    # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types)
    # @default -- "ClusterIP"
    serviceType: ""
  # -- Enable `jaeger`
  enabled: false
  image:
    # -- Docker image tag for the `jaeger` image
    defaultTag: 4.3.0@sha256:d08c10f03153b549a94fbc088c186b3f3bf8b4bf0e95815ef1a7ed261a559580
    # -- Docker image name for the `jaeger` image
    name: "jaeger-all-in-one"
  # -- Name used by resources. Does not affect service names or PVCs.
  name: "jaeger"
  # -- Security context for the `jaeger` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container)
  containerSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true
  # -- Security context for the `jaeger` pod,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod)
  podSecurityContext: {}
  query:
    # -- Name of jaeger `query` service 
    name: ""
    # -- Add extra annotations to jaeger `query` service
    serviceAnnotations: {}
    # -- Add extra labels to jaeger `query` service
    serviceLabels: {}
    # -- Kubernetes service type of jaeger `query` service,
    # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types)
    # @default -- "ClusterIP"
    serviceType: ""
  # -- Number of `jaeger` pod
  replicaCount: 1
  # -- Resource requests & limits for the `jaeger` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)
  resources:
    limits:
      cpu: "1"
      memory: 1G
    requests:
      cpu: 500m
      memory: 500M
  serviceAccount:
    # -- Enable creation of ServiceAccount for `jaeger`
    create: false
    # -- Name of the ServiceAccount to be created or an existing ServiceAccount
    name: ""

worker:
  image:
    # -- Docker image tag for the `worker` image
    defaultTag: 4.3.0@sha256:77ef59e382ff339a20104aef546bbd1685449da6aa5d9dff78a06393ee7a7d66
    # -- Docker image name for the `worker` image
    name: "worker"
  # -- Security context for the `worker` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container)
  containerSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true
  # -- Name used by resources. Does not affect service names or PVCs.
  name: "worker"
  # -- Security context for the `worker` pod,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod)
  podSecurityContext: {}
  # -- Number of `worker` pod
  replicaCount: 1
  # -- Resource requests & limits for the `worker` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)
  resources:
    limits:
      cpu: "2"
      memory: 4G
    requests:
      cpu: 500m
      memory: 2G
  serviceAccount:
    # -- Enable creation of ServiceAccount for `worker`
    create: false
    # -- Name of the ServiceAccount to be created or an existing ServiceAccount
    name: ""

# -- Additional resources to include in the rendered manifest. Templates are supported.
extraResources: []
