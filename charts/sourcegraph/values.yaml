# To customize these values, use an override file:
# https://sourcegraph.com/github.com/sourcegraph/deploy-sourcegraph-helm/-/blob/charts/sourcegraph/README.md#customizations

### Common Configuration ###
sourcegraph:
  affinity: {}
  image:
    defaultTag: '{{ .Chart.AppVersion }}'
    pullPolicy: IfNotPresent
    repository: index.docker.io/sourcegraph
    # When set to true, sourcegraph.image.defaultTag is used as the default defaultTag for all services, instead of service-specific default defaultTags
    useGlobalTagAsDefault: false
  # Mount a named secret containing docker credentials
  imagePullSecrets: []
  # Add a global label to all resources
  labels: {}
  # When true, remove all resource stanzas, allowing the scheduler to best-fit pods. Intended for local development with limited resources.
  localDevMode: false
  # Set a custom name for the app.kubernetes.io/name annotation
  nameOverride: ""
  nodeSelector: {}
  podAnnotations: {}
  podLabels: {}
  revisionHistoryLimit: 10
  serviceLabels: {}
  tolerations: []


# Generic application configuration options, used by most applications below
# app: # Generally matches directory name
#   replicaCount: 1
#
#   image:
#     # Application-specific default tag. Overrides the global tag. Do not modify - use tag instead
#     defaultTag:
#     # Override the default tag on a service-specific basis
#     tag:
#     # Override the default docker image name
#     name:
#
#   # Add additional labels and annotations to various resources
#   labels: {}
#   podLabels: {}
#   podAnnotations: {}
#   serviceLabels: {}
#   serviceAnnotations: {}
#   # Override default service/deployment names
#   name: ""
#   # Provide custom environment variables
#   env: {}
#   # Set resource requests / limits
#   resources: {}
#   podSecurityContext: {}
#   securityContext: {}
#   # Add additional volumes and mounts to deployments
#   extraVolumeMounts: {}
#   extraVolumes: {}
#   # Add sidecars
#   extraContainers: {}
#   # Toggle serviceAccount creation
#   serviceAccount.create: true
#   # Customize service account name
#   serviceAccount.name: ""
#   # Override service type (defaults to ClusterIP)
#   serviceType: ""
#   # Set disk size on PVC's for stateful deployments
#   storageSize: ""
#   # Optionally bind PVC's to an existing PV
#   volumeName: ""
#   # Use an existing configmap (specified by name) instead of creating one
#   existingConfig: ""
#   # Toggle deployment of applications on/off. Applies to databases and third-party applications
#   enabled: true

alpine: # Used in init containers
  image:
    defaultTag: 3.37.0@sha256:946f83cf1d822434f242c522cf71717de6cf014a6fc226c9ed82f27ad7e17aa3
    name: "alpine-3.12"
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 999
    runAsGroup: 999
    readOnlyRootFilesystem: true
  resources:
    limits:
      cpu: 10m
      memory: 50Mi
    requests:
      cpu: 10m
      memory: 50Mi

cadvisor:
  enabled: true
  image:
    defaultTag: 3.37.0@sha256:7b0c6953e54746c16f63bcd9029d8bb52e348cd3921261694696eb66b28daf76
    name: "cadvisor"
  podSecurityPolicy:
    enabled: false
  resources:
    limits:
      cpu: 300m
      memory: 2000Mi
    requests:
      cpu: 150m
      memory: 200Mi
  serviceAccount:
    create: true
    name: cadvisor

codeInsightsDB:
  enabled: true
  env:
    POSTGRES_PASSWORD: # Accessible by Sourcegraph applications on the network only, so password auth is not used.
      value: password
  existingConfig: "" # Name of an existing configmap
  image:
    defaultTag: 3.37.0@sha256:fa608333a6ca1aef148abd33e4ee14886d4f172e0db1e5c9ee6bac36adec0bf1
    name: "codeinsights-db"
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 70
    runAsGroup: 70
    readOnlyRootFilesystem: true
  replicaCount: 1
  resources:
    limits:
      cpu: "4"
      memory: 2Gi
    requests:
      cpu: "4"
      memory: 2Gi
  securityContext:
    runAsUser: 70
    fsGroup: 70
    fsGroupChangePolicy: "OnRootMismatch"
  storageSize: 200Gi

codeIntelDB:
  enabled: true
  existingConfig: "" # Name of an existing configmap
  image:
    defaultTag: 3.37.0@sha256:fc2ab91482f85f77eb73c69a35a2a4cc5055a1b93ef1c1d0f183a7003e632082
    name: "codeintel-db"
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 999
    runAsGroup: 999
    readOnlyRootFilesystem: true
  postgresExporter:
    env:
      DATA_SOURCE_NAME:
        value: postgres://sg:@localhost:5432/?sslmode=disable
  replicaCount: 1
  resources:
    limits:
      cpu: "4"
      memory: 4Gi
    requests:
      cpu: "4"
      memory: 4Gi
  securityContext:
    runAsUser: 999
    fsGroup: 999
    fsGroupChangePolicy: "OnRootMismatch"
  storageSize: 200Gi

frontend:
  env:
    CODEINSIGHTS_PGDATASOURCE:
      value: postgres://postgres:password@codeinsights-db:5432/postgres
    CODEINTEL_PGDATABASE:
      value: sg
    CODEINTEL_PGHOST:
      value: codeintel-db
    CODEINTEL_PGPORT:
      value: "5432"
    CODEINTEL_PGSSLMODE:
      value: disable
    CODEINTEL_PGUSER:
      value: sg
    GRAFANA_SERVER_URL:
      value: http://grafana:30070
    JAEGER_SERVER_URL:
      value: http://jaeger-query:16686
    PGDATABASE:
      value: sg
    PGHOST:
      value: pgsql
    PGUSER:
      value: sg
    PROMETHEUS_URL:
      value: http://prometheus:30090
  image:
    defaultTag: 3.37.0@sha256:724ccb31e95237cbe12b51f3c8b8d22a7d0ac65a73ee8084614360c2018ce3ca
    name: "frontend"
  ingress:
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/proxy-body-size: 150m
    enabled: true
    host: "" # External host name for SSL
    ingressClassName: null # Available in Kubernetes 1.18+
    tlsSecret: "" # Secret containing SSL cert
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true
  privileged: true # Creates Role instead of using existing roles
  replicaCount: 2
  resources:
    limits:
      cpu: "2"
      ephemeral-storage: 8Gi
      memory: 4G
    requests:
      cpu: "2"
      ephemeral-storage: 4Gi
      memory: 2G
  serviceAccount:
    create: true
    name: sourcegraph-frontend

migrator:
  enabled: true
  image:
    defaultTag: 3.37.0@sha256:404df69cfee90eaa9a3ab8b540a2d9affd22605caa5326a8ac4ba016e1d6d815
    name: "migrator"
  env: {}
  resources: {}
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true

githubProxy:
  image:
    defaultTag: 3.37.0@sha256:3b173e36f958b68479ae829d784c63346701df417afa14d14ae657a84e630dd5
    name: "github-proxy"
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true
  replicaCount: 1
  resources:
    limits:
      cpu: "1"
      memory: 1G
    requests:
      cpu: 100m
      memory: 250M

gitserver:
  image:
    defaultTag: 3.37.0@sha256:9d005ebd221b3e9e5f41ad2c91f8f1b06758a70c6ddbff11acbf037461f7f3d5
    name: "gitserver"
  labels: {}
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true
  replicaCount: 1
  resources:
    limits:
      cpu: "4"
      memory: 8G
    requests:
      cpu: "4"
      memory: 8G
  securityContext:
    runAsUser: 100
    runAsGroup: 101
    fsGroup: 101
    fsGroupChangePolicy: "OnRootMismatch"
  storageSize: 200Gi

grafana:
  enabled: true
  existingConfig: "" # Name of an existing configmap
  image:
    defaultTag: 3.37.0@sha256:a47fde087ee42864ed6108796e95045857b55b3d9327b2d74257321384f6bbd1
    name: "grafana"
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 472
    runAsGroup: 472
    readOnlyRootFilesystem: true
  replicaCount: 1
  resources:
    limits:
      cpu: "1"
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 512Mi
  securityContext:
    runAsUser: 472
    runAsGroup: 472
    fsGroup: 472
    fsGroupChangePolicy: "OnRootMismatch"
  serviceAccount:
    create: true
  storageSize: 2Gi

indexedSearch:
  image:
    defaultTag: 3.37.0@sha256:0f81c4d33c852fc0ee819d5139efa1c48d6cb10a5f86fa2d37ed698bb2a0a892
    name: "indexed-searcher"
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true
  replicaCount: 1
  resources:
    limits:
      cpu: "2"
      memory: 4G
    requests:
      cpu: 500m
      memory: 2G
  securityContext:
    fsGroup: 101
    fsGroupChangePolicy: "OnRootMismatch"
  # The size of disk to used for search indexes.
  # This should typically be gitserver disk size multipled by the number of gitserver shards.
  storageSize: 200Gi

indexedSearchIndexer:
  image:
    defaultTag: 3.37.0@sha256:2a85ddfc2533e525cd7a3a7327fd0174976dcb40d933db8aaafe21ae7ec209c5
    name: "search-indexer"
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true
  resources:
    # zoekt-indexserver is CPU bound. The more CPU you allocate to it, the
    # lower lag between a new commit and it being indexed for search.
    limits:
      cpu: "8"
      memory: 8G
    requests:
      cpu: "4"
      memory: 4G

minio:
  enabled: true
  env:
    MINIO_ACCESS_KEY:
      value: AKIAIOSFODNN7EXAMPLE
    MINIO_SECRET_KEY:
      value: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
  image:
    defaultTag: 3.37.0@sha256:66925bab722ed11584e1135687b5c1e00a13c550e38d954a56048c90f17edc53
    name: "minio"
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
  replicaCount: 1
  resources:
    limits:
      cpu: "1"
      memory: 500M
    requests:
      cpu: "1"
      memory: 500M
  securityContext:
    runAsUser: 100
    runAsGroup: 101
    fsGroup: 101
    fsGroupChangePolicy: "OnRootMismatch"
  storageSize: 100Gi

pgsql:
  enabled: true
  existingConfig: "" # Name of an existing configmap
  image:
    defaultTag: 3.37.0@sha256:af00a4465f435742df9980cc9d8a8bda49d6adea173558a371e276b476ea94ae
    name: "postgres-12.6-alpine"
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 999
    runAsGroup: 999
    readOnlyRootFilesystem: true
  postgresExporter:
    env:
      DATA_SOURCE_NAME:
        value: postgres://sg:@localhost:5432/?sslmode=disable
  replicaCount: 1
  resources:
    limits:
      cpu: "4"
      memory: 4Gi
    requests:
      cpu: "4"
      memory: 4Gi
  securityContext:
    # Required to prevent escalations to root.
    runAsUser: 999
    runAsGroup: 999
    fsGroup: 999
    fsGroupChangePolicy: "OnRootMismatch"
  storageSize: 200Gi

postgresExporter:
  image:
    defaultTag: 3.37.0@sha256:20e58b62f064037ac3d901eba565f49d7e1daae2a237e6fa3d5351580d576dea
    name: "postgres_exporter"
  resources:
    limits:
      cpu: 10m
      memory: 50Mi
    requests:
      cpu: 10m
      memory: 50Mi

preciseCodeIntel:
  env:
    NUM_WORKERS:
      value: "4"
  image:
    defaultTag: 3.37.0@sha256:8435299294539b1144bb897541de7c2535bacae486d91bba4656178b2ecf4d9f
    name: "precise-code-intel-worker"
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true
  replicaCount: 2
  resources:
    limits:
      cpu: "2"
      memory: 4G
    requests:
      cpu: 500m
      memory: 2G

prometheus:
  enabled: true
  existingConfig: "" # Name of an existing configmap
  image:
    defaultTag: 3.37.0@sha256:b51ccc7c9f19eacfeaa22f888432415dda3bebad58e14b84c829e02b2c719e66
    name: "prometheus"
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 100
    readOnlyRootFilesystem: true
  privileged: true
  replicaCount: 1
  # Prometheus is relied upon to monitor services for sending alerts to site admins when
  # something is wrong with Sourcegraph, thus its memory requests and limits are the same to
  # guarantee it has enough memory to perform its job reliably and prevent conflicts with
  # other pods on the same host node.
  #
  # The limit chosen here is based on what works reliably on Sourcegraph.com with lots
  # of traffic.
  resources:
    limits:
      cpu: "2"
      memory: 6G
    requests:
      cpu: 500m
      memory: 6G
  securityContext:
    fsGroup: 100
    fsGroupChangePolicy: "OnRootMismatch"
  serviceAccount:
    create: true
  storageSize: 200Gi

redisCache:
  enabled: true
  image:
    defaultTag: 3.37.0@sha256:ff28c3902b0ba142e3409e3bb905913aaabc821e7efdaa43458ea3bbe65b7e16
    name: "redis-cache"
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 999
    runAsGroup: 1000
    readOnlyRootFilesystem: true
  replicaCount: 1
  resources:
    limits:
      cpu: "1"
      memory: 7Gi
    requests:
      cpu: "1"
      memory: 7Gi
  securityContext:
    fsGroup: 1000
    fsGroupChangePolicy: "OnRootMismatch"
  storageSize: 100Gi

redisExporter:
  image:
    defaultTag: 3.37.0@sha256:f3f51453e4261734f08579fe9c812c66ee443626690091401674be4fb724da70
    name: "redis_exporter"
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 999
    runAsGroup: 1000
    readOnlyRootFilesystem: true
  resources:
    limits:
      cpu: 10m
      memory: 100Mi
    requests:
      cpu: 10m
      memory: 100Mi

redisStore:
  enabled: true
  image:
    defaultTag: 3.37.0@sha256:e1cfaeb18367d76838fec0e5f52e2c7d85f2fb63537a3fe809014a986393c9c7
    name: "redis-store"
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 999
    runAsGroup: 1000
    readOnlyRootFilesystem: true
  replicaCount: 1
  resources:
    limits:
      cpu: "1"
      memory: 7Gi
    requests:
      cpu: "1"
      memory: 7Gi
  securityContext:
    fsGroup: 1000
    fsGroupChangePolicy: "OnRootMismatch"
  storageSize: 100Gi

repoUpdater:
  image:
    defaultTag: 3.37.0@sha256:fd0562d9d3972d2e4f504b0de8803f485603b57fbc4dd77ac085b1f96dfacbe4
    name: "repo-updater"
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true
  replicaCount: 1
  resources:
    limits:
      cpu: "1"
      memory: 2Gi
    requests:
      cpu: "1"
      memory: 500Mi

searcher:
  image:
    defaultTag: 3.37.0@sha256:f603c68f8ece63fb3b49cfe09df8a4e7407c713dd6e0267395ba781f1c6fc36c
    name: "searcher"
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true
  replicaCount: 2
  resources:
    limits:
      cpu: "2"
      ephemeral-storage: 26G
      memory: 2G
    requests:
      cpu: 500m
      ephemeral-storage: 25G
      memory: 500M

storageClass:
  create: true # Disable if you have your own existing storage class
  name: sourcegraph # Customize to the existing storage class name
  provisioner: kubernetes.io/gce-pd
  type: pd-ssd

symbols:
  image:
    defaultTag: 3.37.0@sha256:b0a3b576e7d61bc9c489fa1378ab0ead4b28fe5fb85d96ae8bf7cd5d9b3631c9
    name: "symbols"
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true
  replicaCount: 1
  resources:
    limits:
      cpu: "2"
      ephemeral-storage: 12G
      memory: 2G
    requests:
      cpu: 500m
      ephemeral-storage: 10G
      memory: 500M

syntectServer:
  image:
    defaultTag: 3.37.0@sha256:4c371a925ce1b97f2ec7f44c582795409c0b19d073a41c7123b07be06e2ebd47
    name: "syntax-highlighter"
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true
  replicaCount: 1
  resources:
    limits:
      cpu: "4"
      memory: 6G
    requests:
      cpu: 250m
      memory: 2G

tracing:
  collector: {}
  enabled: true
  image:
    defaultTag: 3.37.0@sha256:aece0527d8efcee8ca7ee013a834ba8c332c44666542a45f6b5451d6e7949b74
    name: "jaeger-all-in-one"
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true
  query: {}
  replicaCount: 1
  resources:
    limits:
      cpu: "1"
      memory: 1G
    requests:
      cpu: 500m
      memory: 500M

tracingAgent:
  enabled: true
  image:
    defaultTag: 3.37.0@sha256:04026339976f6107b6490dfe61c9d9b3a541594ba99ff5115667a54e4ec917ba
    name: "jaeger-agent"
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true
  resources:
    limits:
      cpu: "1"
      memory: 500M
    requests:
      cpu: 100m
      memory: 100M

worker:
  image:
    defaultTag: 3.37.0@sha256:0b3a8d3a59a65c5aabfa4c5bb78cc6eea1c7926fa66ae7558e20f8ca6b11d629
    name: "worker"
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true
  replicaCount: 1
  resources:
    limits:
      cpu: "2"
      memory: 4G
    requests:
      cpu: 500m
      memory: 2G
