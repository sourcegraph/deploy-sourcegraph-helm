# To customize these values, use an override file:
# https://sourcegraph.com/github.com/sourcegraph/deploy-sourcegraph-helm/-/blob/charts/sourcegraph/README.md#customizations

### Common Configuration ###
sourcegraph:
  affinity: {}
  image:
    defaultTag: '{{ .Chart.AppVersion }}'
    pullPolicy: IfNotPresent
    repository: index.docker.io/sourcegraph
    # When set to true, sourcegraph.image.defaultTag is used as the default defaultTag for all services, instead of service-specific default defaultTags
    useGlobalTagAsDefault: false
  # Mount a named secret containing docker credentials
  imagePullSecrets: []
  # Add a global label to all resources
  labels: {}
  # When true, remove all resource stanzas, allowing the scheduler to best-fit pods. Intended for local development with limited resources.
  localDevMode: false
  # Set a custom name for the app.kubernetes.io/name annotation
  nameOverride: ""
  nodeSelector: {}
  podAnnotations: {}
  podLabels: {}
  revisionHistoryLimit: 10
  serviceLabels: {}
  tolerations: {}


# Generic application configuration options, used by most applications below
# app: # Generally matches directory name
#   replicaCount: 1
#
#   image:
#     # Application-specific default tag. Overrides the global tag. Do not modify - use tag instead
#     defaultTag:
#     # Override the default tag on a service-specific basis
#     tag:
#     # Override the default docker image name
#     name:
#
#   # Add additional labels and annotations to various resources
#   labels: {}
#   podLabels: {}
#   podAnnotations: {}
#   serviceLabels: {}
#   serviceAnnotations: {}
#   # Override default service/deployment names
#   name: ""
#   # Provide custom environment variables
#   env: {}
#   # Set resource requests / limits
#   resources: {}
#   podSecurityContext: {}
#   securityContext: {}
#   # Add additional volumes and mounts to deployments
#   extraVolumeMounts: {}
#   extraVolumes: {}
#   # Add sidecars
#   extraContainers: {}
#   # Toggle serviceAccount creation
#   serviceAccount.create: true
#   # Customize service account name
#   serviceAccount.name: ""
#   # Override service type (defaults to ClusterIP)
#   serviceType: ""
#   # Set disk size on PVC's for stateful deployments
#   storageSize: ""
#   # Optionally bind PVC's to an existing PV
#   volumeName: ""
#   # Use an existing configmap (specified by name) instead of creating one
#   existingConfig: ""
#   # Toggle deployment of applications on/off. Applies to databases and third-party applications
#   enabled: true

alpine: # Used in init containers
  image:
    defaultTag: 3.36.3@sha256:98d8f68fe165fe9a665b6409955edc6d162ffc8a0fcdc02b574d938c8f87e18c
    name: "alpine-3.12"
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 999
    runAsGroup: 999
    readOnlyRootFilesystem: true
  resources:
    limits:
      cpu: 10m
      memory: 50Mi
    requests:
      cpu: 10m
      memory: 50Mi

cadvisor:
  enabled: true
  image:
    defaultTag: 3.36.3@sha256:249c573262967979889a186344ba5cc4e8e9186ec4f26c759ce9f8527560da69
    name: "cadvisor"
  podSecurityPolicy:
    enabled: false
  resources:
    limits:
      cpu: 300m
      memory: 2000Mi
    requests:
      cpu: 150m
      memory: 200Mi
  serviceAccount:
    create: true
    name: cadvisor

codeInsightsDB:
  enabled: true
  env:
    POSTGRES_PASSWORD: # Accessible by Sourcegraph applications on the network only, so password auth is not used.
      value: password
  existingConfig: "" # Name of an existing configmap
  image:
    defaultTag: 3.36.3@sha256:98133abeb1fc6d02ee9f0fca6cc3ab65e2a3a47a07db96a56aa0869389393fce
    name: "codeinsights-db"
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 70
    runAsGroup: 70
    readOnlyRootFilesystem: true
  replicaCount: 1
  resources:
    limits:
      cpu: "4"
      memory: 2Gi
    requests:
      cpu: "4"
      memory: 2Gi
  securityContext:
    runAsUser: 70
    fsGroup: 70
    fsGroupChangePolicy: "OnRootMismatch"
  storageSize: 200Gi

codeIntelDB:
  enabled: true
  existingConfig: "" # Name of an existing configmap
  image:
    defaultTag: 3.36.3@sha256:fe3e956733e6ad3599c79d8ca8754249281eb3918aab110e99189cc9b052e28a
    name: "codeintel-db"
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 999
    runAsGroup: 999
    readOnlyRootFilesystem: true
  postgresExporter:
    env:
      DATA_SOURCE_NAME:
        value: postgres://sg:@localhost:5432/?sslmode=disable
  replicaCount: 1
  resources:
    limits:
      cpu: "4"
      memory: 4Gi
    requests:
      cpu: "4"
      memory: 4Gi
  securityContext:
    runAsUser: 999
    fsGroup: 999
    fsGroupChangePolicy: "OnRootMismatch"
  storageSize: 200Gi

frontend:
  env:
    CODEINSIGHTS_PGDATASOURCE:
      value: postgres://postgres:password@codeinsights-db:5432/postgres
    CODEINTEL_PGDATABASE:
      value: sg
    CODEINTEL_PGHOST:
      value: codeintel-db
    CODEINTEL_PGPORT:
      value: "5432"
    CODEINTEL_PGSSLMODE:
      value: disable
    CODEINTEL_PGUSER:
      value: sg
    GRAFANA_SERVER_URL:
      value: http://grafana:30070
    JAEGER_SERVER_URL:
      value: http://jaeger-query:16686
    PGDATABASE:
      value: sg
    PGHOST:
      value: pgsql
    PGUSER:
      value: sg
    PROMETHEUS_URL:
      value: http://prometheus:30090
  image:
    defaultTag: 3.36.3@sha256:f446e633ea7b536bb1a634267dea2ad1220734e90b7649aa981e9240d39e7e0c
    name: "frontend"
  ingress:
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/proxy-body-size: 150m
    enabled: true
    host: "" # External host name for SSL
    ingressClassName: null # Available in Kubernetes 1.18+
    tlsSecret: "" # Secret containing SSL cert
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true
  privileged: true # Creates Role instead of using existing roles
  replicaCount: 2
  resources:
    limits:
      cpu: "2"
      ephemeral-storage: 8Gi
      memory: 4G
    requests:
      cpu: "2"
      ephemeral-storage: 4Gi
      memory: 2G
  serviceAccount:
    create: true
    name: sourcegraph-frontend

githubProxy:
  image:
    defaultTag: 3.36.3@sha256:0b8f2a3d5751bf2e438ce1784be5cac7da19bdca0a25623f03a64a652c8def0d
    name: "github-proxy"
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true
  replicaCount: 1
  resources:
    limits:
      cpu: "1"
      memory: 1G
    requests:
      cpu: 100m
      memory: 250M

gitserver:
  image:
    defaultTag: 3.36.3@sha256:8830d2bd6a3ad1fefeb9b7e89471101fa8b3e342b5f0a80cb793985b9017f07b
    name: "gitserver"
  labels: {}
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true
  replicaCount: 1
  resources:
    limits:
      cpu: "4"
      memory: 8G
    requests:
      cpu: "4"
      memory: 8G
  securityContext:
    runAsUser: 100
    runAsGroup: 101
    fsGroup: 101
    fsGroupChangePolicy: "OnRootMismatch"
  storageSize: 200Gi

grafana:
  enabled: true
  existingConfig: "" # Name of an existing configmap
  image:
    defaultTag: 3.36.3@sha256:064908bc5848234f2fa4d86f7289af38b707612f90d80008acabe805c27c8a15
    name: "grafana"
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 472
    runAsGroup: 472
    readOnlyRootFilesystem: true
  replicaCount: 1
  resources:
    limits:
      cpu: "1"
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 512Mi
  securityContext:
    runAsUser: 472
    runAsGroup: 472
    fsGroup: 472
    fsGroupChangePolicy: "OnRootMismatch"
  serviceAccount:
    create: true
  storageSize: 2Gi

indexedSearch:
  image:
    defaultTag: 3.36.3@sha256:1399fbff116c249d4aec55c2c1e70c23e4617bf3a17921cfdede53893e97b533
    name: "indexed-searcher"
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true
  replicaCount: 1
  resources:
    limits:
      cpu: "2"
      memory: 4G
    requests:
      cpu: 500m
      memory: 2G
  securityContext:
    fsGroup: 101
    fsGroupChangePolicy: "OnRootMismatch"
  # The size of disk to used for search indexes.
  # This should typically be gitserver disk size multipled by the number of gitserver shards.
  storageSize: 200Gi

indexedSearchIndexer:
  image:
    defaultTag: 3.36.3@sha256:a9a72e81cacdb644b0530229bd6b5c54dcd84d2d15d11976f28b59f970b85471
    name: "search-indexer"
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true
  resources:
    # zoekt-indexserver is CPU bound. The more CPU you allocate to it, the
    # lower lag between a new commit and it being indexed for search.
    limits:
      cpu: "8"
      memory: 8G
    requests:
      cpu: "4"
      memory: 4G

minio:
  enabled: true
  env:
    MINIO_ACCESS_KEY:
      value: AKIAIOSFODNN7EXAMPLE
    MINIO_SECRET_KEY:
      value: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
  image:
    defaultTag: 3.36.3@sha256:66925bab722ed11584e1135687b5c1e00a13c550e38d954a56048c90f17edc53
    name: "minio"
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
  replicaCount: 1
  resources:
    limits:
      cpu: "1"
      memory: 500M
    requests:
      cpu: "1"
      memory: 500M
  securityContext:
    runAsUser: 100
    runAsGroup: 101
    fsGroup: 101
    fsGroupChangePolicy: "OnRootMismatch"
  storageSize: 100Gi

pgsql:
  enabled: true
  existingConfig: "" # Name of an existing configmap
  image:
    defaultTag: 3.36.3@sha256:8a07418646c33d74e749391da3470f37d5401edae588bb79655f8c7206257d49
    name: "postgres-12.6-alpine"
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 999
    runAsGroup: 999
    readOnlyRootFilesystem: true
  postgresExporter:
    env:
      DATA_SOURCE_NAME:
        value: postgres://sg:@localhost:5432/?sslmode=disable
  replicaCount: 1
  resources:
    limits:
      cpu: "4"
      memory: 4Gi
    requests:
      cpu: "4"
      memory: 4Gi
  securityContext:
    # Required to prevent escalations to root.
    runAsUser: 999
    runAsGroup: 999
    fsGroup: 999
    fsGroupChangePolicy: "OnRootMismatch"
  storageSize: 200Gi

postgresExporter:
  image:
    defaultTag: 3.36.3@sha256:33163fc4ff3a4973f7ab02f11f13b2fb828a705e7576793319324858885f7996
    name: "postgres_exporter"
  resources:
    limits:
      cpu: 10m
      memory: 50Mi
    requests:
      cpu: 10m
      memory: 50Mi

preciseCodeIntel:
  env:
    NUM_WORKERS:
      value: "4"
  image:
    defaultTag: 3.36.3@sha256:a5c4622636404fd5d753d11c907cde27676839c46b294bd111c0fb3475a708d9
    name: "precise-code-intel-worker"
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true
  replicaCount: 2
  resources:
    limits:
      cpu: "2"
      memory: 4G
    requests:
      cpu: 500m
      memory: 2G

prometheus:
  enabled: true
  existingConfig: "" # Name of an existing configmap
  image:
    defaultTag: 3.36.3@sha256:01e102854f9d5888cd961f3aa8af416c2d0336b8673eefd8b2c7a095246fc130
    name: "prometheus"
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 100
    readOnlyRootFilesystem: true
  privileged: true
  replicaCount: 1
  # Prometheus is relied upon to monitor services for sending alerts to site admins when
  # something is wrong with Sourcegraph, thus its memory requests and limits are the same to
  # guarantee it has enough memory to perform its job reliably and prevent conflicts with
  # other pods on the same host node.
  #
  # The limit chosen here is based on what works reliably on Sourcegraph.com with lots
  # of traffic.
  resources:
    limits:
      cpu: "2"
      memory: 6G
    requests:
      cpu: 500m
      memory: 6G
  securityContext:
    fsGroup: 100
    fsGroupChangePolicy: "OnRootMismatch"
  serviceAccount:
    create: true
  storageSize: 200Gi

redisCache:
  enabled: true
  image:
    defaultTag: 3.36.3@sha256:4aa9d97e42ad44e035107c12af6605543afb27c5b3b8582721e8c12736129597
    name: "redis-cache"
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 999
    runAsGroup: 1000
    readOnlyRootFilesystem: true
  replicaCount: 1
  resources:
    limits:
      cpu: "1"
      memory: 7Gi
    requests:
      cpu: "1"
      memory: 7Gi
  securityContext:
    fsGroup: 1000
    fsGroupChangePolicy: "OnRootMismatch"
  storageSize: 100Gi

redisExporter:
  image:
    defaultTag: 3.36.3@sha256:f3f51453e4261734f08579fe9c812c66ee443626690091401674be4fb724da70
    name: "redis_exporter"
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 999
    runAsGroup: 1000
    readOnlyRootFilesystem: true
  resources:
    limits:
      cpu: 10m
      memory: 100Mi
    requests:
      cpu: 10m
      memory: 100Mi

redisStore:
  enabled: true
  image:
    defaultTag: 3.36.3@sha256:6f33f93d73b825c890f3eb22f9d1f760c92e21b19cc948a9f58921c8eb5bbfc0
    name: "redis-store"
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 999
    runAsGroup: 1000
    readOnlyRootFilesystem: true
  replicaCount: 1
  resources:
    limits:
      cpu: "1"
      memory: 7Gi
    requests:
      cpu: "1"
      memory: 7Gi
  securityContext:
    fsGroup: 1000
    fsGroupChangePolicy: "OnRootMismatch"
  storageSize: 100Gi

repoUpdater:
  image:
    defaultTag: 3.36.3@sha256:e4c2c756a97c15da8c5e4e4b944ca3ed8b469ecb6f284e0bad598c6cbf0d8452
    name: "repo-updater"
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true
  replicaCount: 1
  resources:
    limits:
      cpu: "1"
      memory: 2Gi
    requests:
      cpu: "1"
      memory: 500Mi

searcher:
  image:
    defaultTag: 3.36.3@sha256:c2ab00f8194fde6eec005bedb4296e86c1262f086e963577f669d480504df016
    name: "searcher"
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true
  replicaCount: 2
  resources:
    limits:
      cpu: "2"
      ephemeral-storage: 26G
      memory: 2G
    requests:
      cpu: 500m
      ephemeral-storage: 25G
      memory: 500M

storageClass:
  create: true # Disable if you have your own existing storage class
  name: sourcegraph # Customize to the existing storage class name
  provisioner: kubernetes.io/gce-pd
  type: pd-ssd

symbols:
  image:
    defaultTag: 3.36.3@sha256:6b75d298acdbad333ed33e077a815ffe12b45b7d7ee76438b9b81f61faf6b60b
    name: "symbols"
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true
  replicaCount: 1
  resources:
    limits:
      cpu: "2"
      ephemeral-storage: 12G
      memory: 2G
    requests:
      cpu: 500m
      ephemeral-storage: 10G
      memory: 500M

syntectServer:
  image:
    defaultTag: 3.36.3@sha256:d1088ff81f2b700f5541d23a14910b850309ce9208058255816e771be9e1d49b
    name: "syntax-highlighter"
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true
  replicaCount: 1
  resources:
    limits:
      cpu: "4"
      memory: 6G
    requests:
      cpu: 250m
      memory: 2G

tracing:
  collector: {}
  enabled: true
  image:
    defaultTag: 3.36.3@sha256:c95c0f563dfc946b06ff0ce8c7db6d66e62b09a937917d804828bc46503e517b
    name: "jaeger-all-in-one"
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true
  query: {}
  replicaCount: 1
  resources:
    limits:
      cpu: "1"
      memory: 1G
    requests:
      cpu: 500m
      memory: 500M

tracingAgent:
  enabled: true
  image:
    defaultTag: 3.36.3@sha256:763056bd06bd0c16db2c9cad4c77999c8482d5a4dca40d4f6574e367ae2d62cd
    name: "jaeger-agent"
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true
  resources:
    limits:
      cpu: "1"
      memory: 500M
    requests:
      cpu: 100m
      memory: 100M

worker:
  image:
    defaultTag: 3.36.3@sha256:b4e56f9f2b1dc6c603463b743aca7da9dfeff83677aa271ace5eacf9e70181b4
    name: "worker"
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true
  replicaCount: 1
  resources:
    limits:
      cpu: "2"
      memory: 4G
    requests:
      cpu: 500m
      memory: 2G
