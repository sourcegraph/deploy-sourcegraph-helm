# To customize these values, use an override file:
# https://sourcegraph.com/github.com/sourcegraph/deploy-sourcegraph-helm/-/blob/charts/sourcegraph/README.md#customizations

### Common Configuration ###
sourcegraph:
  image:
    # -- Global docker image tag
    defaultTag: "{{ .Chart.AppVersion }}"
    # -- Global docker image pull policy
    pullPolicy: IfNotPresent
    # -- Global docker image registry or prefix
    repository: us-central1-docker.pkg.dev/sourcegraph-ci/rfc795-internal
    # -- When set to true, sourcegraph.image.defaultTag is used as the default defaultTag for all services, instead of service-specific default defaultTags
    useGlobalTagAsDefault: false
  # -- Mount named secrets containing docker credentials
  imagePullSecrets: []
  # -- Add extra labels to all resources
  labels: {}
  # -- When true, remove all resource stanzas, allowing the scheduler to best-fit pods. Intended for local development with limited resources.
  localDevMode: false
  # -- Set a custom name for the app.kubernetes.io/name annotation
  nameOverride: ""
  # -- Global Affinity,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity)
  affinity: {}
  # -- Global NodeSelector,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector)
  nodeSelector: {}
  # -- Global Tolerations,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/)
  tolerations: []
  # -- Add extra annotations to attach to all pods
  podAnnotations: {}
  # -- Add extra labels to attach to all pods
  podLabels: {}
  # -- Global deployment clean up policy,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#clean-up-policy)
  revisionHistoryLimit: 10
  # -- Add extra labels to all services
  serviceLabels: {}

# Generic application configuration options, used by most applications below
# app: # Generally matches directory name
#   replicaCount: 1
#
#   image:
#     # Application-specific default tag. Overrides the global tag. Do not modify - use tag instead
#     defaultTag:
#     # Override the default tag on a service-specific basis
#     tag:
#     # Override the default docker image name
#     name:
#
#   # Add additional labels and annotations to various resources
#   labels: {}
#   podLabels: {}
#   podAnnotations: {}
#   serviceLabels: {}
#   serviceAnnotations: {}
#   # Provide custom environment variables
#   env: {}
#   # Set resource requests / limits
#   resources: {}
#   containerSecurityContext: {}
#   podSecurityContext: {}
#   # Add additional volumes and mounts to deployments
#   extraVolumeMounts: {}
#   extraVolumes: {}
#   # Add sidecars
#   extraContainers: {}
#   # Toggle serviceAccount creation
#   serviceAccount.create: true
#   # Customize service account name
#   serviceAccount.name: ""
#   # Override service type (defaults to ClusterIP)
#   serviceType: ""
#   # Set disk size on PVC's for stateful deployments
#   storageSize: ""
#   # Optionally bind PVC's to an existing PV
#   volumeName: ""
#   # Use an existing configmap (specified by name) instead of creating one
#   existingConfig: ""
#   # Toggle deployment of applications on/off. Applies to databases and third-party applications
#   enabled: true

alpine: # Used in init containers
  image:
    # -- Docker image tag for the `alpine` image
    defaultTag: 6.5.0@sha256:9c75ec365d3f104f1bb177e3ef68811c3c6271ae784ce1416505b31101a69e16
    # -- Docker image name for the `alpine` image
    name: "alpine-3.14"
  # -- Security context for the `alpine` initContainer,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container)
  containerSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 999
    runAsGroup: 999
    readOnlyRootFilesystem: true
  # -- Resource requests & limits for the `alpine` initContainer,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)
  resources:
    limits:
      cpu: 10m
      memory: 50Mi
    requests:
      cpu: 10m
      memory: 50Mi

cadvisor:
  # -- Enable `cadvisor`
  enabled: true
  image:
    # -- Docker image tag for the `cadvisor` image
    defaultTag: 6.5.0@sha256:0f32689d4c255bdfa6d2707d2f6faebb234d2ba4b747469fa5d086373410b377
    # -- Docker image name for the `cadvisor` image
    name: "cadvisor"
  # -- Name used by resources. Does not affect service names or PVCs.
  name: "cadvisor"
  podSecurityPolicy:
    # -- Enable [PodSecurityPolicy](https://kubernetes.io/docs/concepts/policy/pod-security-policy/) for `cadvisor` pods
    enabled: false
  # -- Resource requests & limits for the `cadvisor` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)
  resources:
    limits:
      cpu: 300m
      memory: 2000Mi
    requests:
      cpu: 150m
      memory: 200Mi
  serviceAccount:
    # -- Enable creation of ServiceAccount for `cadvisor`
    create: true
    # -- Name of the ServiceAccount to be created or an existing ServiceAccount
    name: cadvisor
  # -- Security context for the `cadvisor` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container)
  containerSecurityContext:
    # You may set `privileged` to `false and `cadvisor` will run with reduced privileges.
    # `cadvisor` requires root privileges in order to display provisioning metrics.
    # These metrics provide critical information to help you scale the Sourcegraph deployment.
    # If you would like to bring your own infrastructure monitoring & alerting solution,
    # you may want to disable the `cadvisor` DaemonSet completely
    # by setting `cadvisor.enabled=false` in your override file
    # You may also run `cadvisor` with reduced privileges by setting
    # `cadvisor.containerSecurityContext.privileged=false` in your override file
    privileged: true

codeInsightsDB:
  # -- Enable `codeinsights-db` PostgreSQL server
  enabled: true
  auth:
    # -- Name of existing secret to use for Code Insights credentials
    # The secret must contain the keys `user`, `password`, `database`, `host` and `port`.
    # `auth.user`, `auth.password`, etc. are ignored if this is enabled
    existingSecret: ""
    # -- Sets codeinsights-db database name
    database: "postgres"
    # -- Sets codeinsights-db host
    host: "codeinsights-db"
    # -- Sets codeinsights-db username
    user: "postgres"
    # -- Sets codeinsights-db password
    password: "password"
    # -- Sets codeinsights-db port
    port: "5432"
    # -- Sets codeinsights-db SSL mode
    sslmode: "disable"  # set to "require" to enable SSL
  # -- Environment variables for the `codeinsights-db` container
  env: {}
  # -- Name of existing ConfigMap for `codeinsights-db`. It must contain a `postgresql.conf` key.
  existingConfig: "" # Name of an existing configmap
  # -- Additional PostgreSQL configuration. This will override or extend our default configuration.
  # Notes: This is expecting a multiline string.
  # Learn more from our [recommended PostgreSQL configuration](https://docs.sourcegraph.com/admin/config/postgres-conf) and [PostgreSQL documentation](https://www.postgresql.org/docs/12/config-setting.html)
  additionalConfig: ""
  image:
    # -- Docker image tag for the `codeinsights-db` image
    defaultTag: 6.5.0@sha256:9e1842aeef4d78d4b05f1299fdf62b323d5032f6768e69c6f49dcae0100f6bb2
    # -- Docker image name for the `codeinsights-db` image
    name: "postgresql-16-codeinsights"
  # -- Security context for the `codeinsights-db` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container)
  containerSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 70
    runAsGroup: 70
    readOnlyRootFilesystem: true
  init:
    # -- Security context for the `alpine` initContainer,
    # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container)
    containerSecurityContext:
      allowPrivilegeEscalation: false
      runAsUser: 70
      runAsGroup: 70
      readOnlyRootFilesystem: true
  # -- Configuration for the `pgsql-exporter` sidecar container
  postgresExporter: {}
  # -- Name used by resources. Does not affect service names or PVCs.
  name: "codeinsights-db"
  # -- Resource requests & limits for the `codeinsights-db` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)
  resources:
    limits:
      cpu: "4"
      memory: 2Gi
    requests:
      cpu: "4"
      memory: 2Gi
  # -- Security context for the `codeinsights-db` pod,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod)
  podSecurityContext:
    runAsUser: 70
    fsGroup: 70
    fsGroupChangePolicy: "OnRootMismatch"
  serviceAccount:
    # -- Enable creation of ServiceAccount for `codeinsights-db`
    create: false
    # -- Name of the ServiceAccount to be created or an existing ServiceAccount
    name: ""
  # -- PVC Storage Request for `codeinsights-db` data volume
  storageSize: 200Gi

codeIntelDB:
  # -- Enable `codeintel-db` PostgreSQL server
  enabled: true
  auth:
    # -- Name of existing secret to use for CodeIntel credentials
    # The secret must contain the keys `user`, `password`, `database`, `host` and `port`.
    # `auth.user`, `auth.password`, etc. are ignored if this is enabled
    existingSecret: ""
    # -- Sets codeintel-db database name
    database: "sg"
    # -- Sets codeintel-db host
    host: "codeintel-db"
    # -- Sets codeintel-db username
    user: "sg"
    # -- Sets codeintel-db password
    password: "password"
    # -- Sets codeintel-db port
    port: "5432"
    # -- Sets codeintel-db SSL mode
    sslmode: "disable"  # set to "require" to enable SSL
  # -- Name of existing ConfigMap for `codeintel-db`. It must contain a `postgresql.conf` key
  existingConfig: ""
  # -- Additional PostgreSQL configuration. This will override or extend our default configuration.
  # Notes: This is expecting a multiline string.
  # Learn more from our [recommended PostgreSQL configuration](https://docs.sourcegraph.com/admin/config/postgres-conf) and [PostgreSQL documentation](https://www.postgresql.org/docs/12/config-setting.html)
  additionalConfig: ""
  image:
    # -- Docker image tag for the `codeintel-db` image
    defaultTag: 6.5.0@sha256:f243676c3222d9bd228cbbbde964ba84d996fe509cf55d1e4301b9f2863cbbbe
    # -- Docker image name for the `codeintel-db` image
    name: "postgresql-16"
  # -- Security context for the `codeintel-db` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container)
  containerSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 999
    runAsGroup: 999
    readOnlyRootFilesystem: true
  # -- Configuration for the `pgsql-exporter` sidecar container
  postgresExporter: {}
  # -- Name used by resources. Does not affect service names or PVCs.
  name: "codeintel-db"
  # -- Resource requests & limits for the `codeintel-db` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)
  resources:
    limits:
      cpu: "4"
      memory: 4Gi
    requests:
      cpu: "4"
      memory: 4Gi
  # -- Security context for the `codeintel-db` pod,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod)
  podSecurityContext:
    runAsUser: 999
    fsGroup: 999
    fsGroupChangePolicy: "OnRootMismatch"
  serviceAccount:
    # -- Enable creation of ServiceAccount for `codeintel-db`
    create: false
    # -- Name of the ServiceAccount to be created or an existing ServiceAccount
    name: ""
  # -- PVC Storage Request for `codeintel-db` data volume
  storageSize: 200Gi

frontend:
  # -- Environment variables for the `frontend` container
  # @default -- the chart will add some default environment values
  env:
    DEPLOY_TYPE:
      value: helm
    GRAFANA_SERVER_URL:
      value: http://grafana:30070
    JAEGER_SERVER_URL:
      value: http://jaeger-query:16686
    PROMETHEUS_URL:
      value: http://prometheus:30090
  image:
    # -- Docker image tag for the `frontend` image
    defaultTag: 6.5.0@sha256:8035d2f1c3ac4a9cf57e747aebb0561c37181ac325bdb8fe63a896eaceda26a1
    # -- Docker image name for the `frontend` image
    name: "frontend"
  ingress:
    # -- Enable ingress for the Sourcegraph server
    enabled: true
    # -- Annotations for the Sourcegraph server ingress. For example, securing ingress with TLS provided by [cert-manager](https://cert-manager.io/docs/usage/ingress/)
    annotations:
      # --  [Deprecated annotation](https://kubernetes.io/docs/concepts/services-networking/ingress/#deprecated-annotation) for specifing the IngressClass in Kubernetes 1.17 and earlier.
      # If you are using Kubernetes 1.18+, use `ingressClassName` instead and set an override value of `null` for this annotation.
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/proxy-body-size: 150m
    # -- External hostname for the Sourcegraph server ingress (SSL)
    host: ""
    # -- IngressClassName for the Ingress (Available in Kubernetes 1.18+)
    # If you set this field, set the annotation `frontend.ingress.annotations."kubernetes.io/ingress.class"` to `null`
    ingressClassName: null
    # -- Secret containing SSL cert
    tlsSecret: ""
  # -- Security context for the `frontend` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container)
  containerSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true
  # -- Security context for the `frontend` pod,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod)
  podSecurityContext: {}
  # -- Enable creation of Role and RoleBinding (RBAC). Uses [view](https://kubernetes.io/docs/reference/access-authn-authz/rbac/#user-facing-roles) ClusterRole if set to false
  privileged: true
  # -- Number of `frontend` pod
  replicaCount: 2
  # -- Name used by resources. Does not affect service names or PVCs.
  name: "sourcegraph-frontend"
  # -- Resource requests & limits for the `frontend` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)
  resources:
    limits:
      cpu: "2"
      ephemeral-storage: 8Gi
      memory: 4G
    requests:
      cpu: "2"
      ephemeral-storage: 4Gi
      memory: 2G
  serviceAccount:
    # -- Enable creation of ServiceAccount for `frontend`
    create: true
    # -- Name of the ServiceAccount to be created or an existing ServiceAccount
    name: sourcegraph-frontend

migrator:
  # -- Enable [migrator](https://docs.sourcegraph.com/admin/how-to/manual_database_migrations) initContainer in
  # `frontend` deployment to perform database migration
  enabled: true
  image:
    # -- Docker image tag for the `migrator` image
    defaultTag: 6.5.0@sha256:786740b87e837be672095b7002c28c53f3f479f3f47b780049c31d00f175ea5d
    # -- Docker image name for the `migrator` image
    name: "migrator"
  # -- Environment variables for the `migrator` container
  env: {}
  # -- Resource requests & limits for the `migrator` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)
  resources:
    limits:
      cpu: 500m
      memory: 100M
    requests:
      cpu: 100m
      memory: 50M
  # -- Security context for the `migrator` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container)
  containerSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true

gitserver:
  image:
    # -- Docker image tag for the `gitserver` image
    defaultTag: 6.5.0@sha256:997005156097a5ebea570ff1843ce3c706715bce60fb7d46140729f5994ad956
    # -- Docker image name for the `gitserver` image
    name: "gitserver"
  # -- Name of existing Secret that contains SSH credentials to clone repositories.
  # It usually contains keys, such as `id_rsa` (private key) and `known_hosts`.
  # Learn more from [documentation](https://docs.sourcegraph.com/admin/install/kubernetes/helm#using-ssh-to-clone-repositories)
  sshSecret: ""
  # -- Security context for the `gitserver` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container)
  containerSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true
  # -- Number of `gitserver` pod
  replicaCount: 1
  # -- Resource requests & limits for the `gitserver` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)
  resources:
    limits:
      cpu: "4"
      memory: 8G
    requests:
      cpu: "4"
      memory: 8G
  # -- Name used by resources. Does not affect service names or PVCs.
  name: "gitserver"
  # -- Security context for the `gitserver` pod,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod)
  podSecurityContext:
    runAsUser: 100
    runAsGroup: 101
    fsGroup: 101
    fsGroupChangePolicy: "OnRootMismatch"
  serviceAccount:
    # -- Enable creation of ServiceAccount for `gitserver`
    create: false
    # -- Name of the ServiceAccount to be created or an existing ServiceAccount
    name: ""
  # -- PVC Storage Request for `gitserver` data volume
  storageSize: 200Gi

grafana:
  # -- Enable `grafana` dashboard (recommended)
  enabled: true
  # -- Sourcegraph Internal - Enable grafana to query pgsql database
  # -- NOTE: Create a separate user in the pgsql database with read-only perms on the minimum set of tables
  auth:
    # -- Name of existing secret to for Grafana to use to connect to the pgsql database
    # The secret must contain the keys `user`, `password`, `database`, `host` and `port`.
    # `auth.user`, `auth.password`, etc. are ignored if this is enabled
    existingSecret: ""
    # -- Sets postgres database name
    database: ""
    # -- Sets postgres host
    host: ""
    # -- Sets postgres username
    user: ""
    # -- Sets postgres password
    password: ""
    # -- Sets postgres port
    port: ""
    # -- Sets postgres sslmode
    sslmode: ""
  # -- Name of existing ConfigMap for `grafana`. It must contain a `datasources.yml` key.
  existingConfig: "" # Name of an existing configmap
  image:
    # -- Docker image tag for the `grafana` image
    defaultTag: 6.5.0@sha256:6215785bf9c74964658ab559a5c2198c3462770482871f7e666ca1a8e0f719bb
    # -- Docker image name for the `grafana` image
    name: "grafana"
  # -- Security context for the `grafana` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container)
  containerSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 472
    runAsGroup: 472
    readOnlyRootFilesystem: true
  # -- Name used by resources. Does not affect service names or PVCs.
  name: "grafana"
  # -- Resource requests & limits for the `grafana` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)
  resources:
    limits:
      cpu: "1"
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 512Mi
  # -- Security context for the `grafana` pod,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod)
  podSecurityContext:
    runAsUser: 472
    runAsGroup: 472
    fsGroup: 472
    fsGroupChangePolicy: "OnRootMismatch"
  serviceAccount:
    # -- Enable creation of ServiceAccount for `grafana`
    create: true
    # -- Name of the ServiceAccount to be created or an existing ServiceAccount
    name: grafana
  # -- PVC Storage Request for `grafana` data volume
  storageSize: 2Gi

indexedSearch:
  image:
    # -- Docker image tag for the `zoekt-webserver` image
    defaultTag: 6.5.0@sha256:9118fab57ba899c810098bd910ee8d0e524546b98a1ab945941424353425b6c5
    # -- Docker image name for the `zoekt-webserver` image
    name: "indexed-searcher"
  # -- Security context for the `zoekt-webserver` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container)
  containerSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true
  # -- Name used by resources. Does not affect service names or PVCs.
  name: "indexed-search"
  # -- Number of `indexed-search` pod
  replicaCount: 1
  # -- Resource requests & limits for the `zoekt-webserver` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)
  resources:
    limits:
      cpu: "2"
      memory: 4G
    requests:
      cpu: 500m
      memory: 2G
  # -- Security context for the `indexed-search` pod,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod)
  podSecurityContext:
    fsGroup: 101
    fsGroupChangePolicy: "OnRootMismatch"
  serviceAccount:
    # -- Enable creation of ServiceAccount for `indexed-search`
    create: false
    # -- Name of the ServiceAccount to be created or an existing ServiceAccount
    name: ""
  # -- PVC Storage Request for `indexed-search` data volume
  # The size of disk to used for search indexes.
  # This should typically be gitserver disk size multipled by the number of gitserver shards.
  storageSize: 200Gi

indexedSearchIndexer:
  image:
    # -- Docker image tag for the `zoekt-indexserver` image
    defaultTag: 6.5.0@sha256:efac3d06e6fad1662c23e9171ed52998239438cf0cf08f5264fcaa15c462f2dd
    # -- Docker image name for the `zoekt-indexserver` image
    name: "search-indexer"
  # -- Security context for the `zoekt-indexserver` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container)
  containerSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true
  # -- Resource requests & limits for the `zoekt-indexserver` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)
  # zoekt-indexserver is CPU bound. The more CPU you allocate to it, the
  # lower lag between a new commit and it being indexed for search.
  resources:
    limits:
      cpu: "8"
      memory: 8G
    requests:
      cpu: "4"
      memory: 4G

blobstore:
  # -- Enable `blobstore` (S3 compatible storage)
  enabled: true
  image:
    # -- Docker image tag for the `blobstore` image
    defaultTag: 6.5.0@sha256:4ce87fcdc809b55c7a3f52766d4d8fbc2a32368498a9ac4c602fed1f28c1143e
    # -- Docker image name for the `blobstore` image
    name: "blobstore"
  # -- Security context for the `blobstore` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container)
  containerSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
  # -- Name used by resources. Does not affect service names or PVCs.
  name: "blobstore"
  # -- Resource requests & limits for the `blobstore` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)
  resources:
    limits:
      cpu: "1"
      memory: 500M
    requests:
      cpu: "1"
      memory: 500M
  # -- Security context for the `blobstore` pod,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod)
  podSecurityContext:
    runAsUser: 100
    runAsGroup: 101
    fsGroup: 101
    fsGroupChangePolicy: "OnRootMismatch"
  serviceAccount:
    # -- Enable creation of ServiceAccount for `blobstore`
    create: false
    # -- Name of the ServiceAccount to be created or an existing ServiceAccount
    name: ""
  # -- PVC Storage Request for `blobstore` data volume
  storageSize: 100Gi

openTelemetry:
  enabled: true
  image:
    # -- Docker image tag for the `otel-collector` image
    defaultTag: 6.5.0@sha256:e56c056bfac916eb8434d065c0a64ab981c31fe913f0ae5433067269d757bcf8
    # -- Docker image name for the `otel-collector` image
    name: "opentelemetry-collector"
  gateway:
    # -- Name used by resources. Does not affect service names or PVCs.
    name: "otel-collector"
    # -- Resource requests & limits for the `otel-collector` container,
    # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)
    resources:
      limits:
        cpu: "3"
        memory: 3Gi
      requests:
        cpu: "1"
        memory: 1Gi
    config:
      traces:
        # -- Define trace processors.
        # Read how to configure sampling in the [OpenTelemetry documentation](https://docs.sourcegraph.com/admin/observability/opentelemetry#sampling-traces)
        processors: {}
        # -- Define where traces should be exported to.
        # Read how to configure different backends in the [OpenTelemetry documentation](https://opentelemetry.io/docs/collector/configuration/#exporters)
        exporters: {}
        # -- Define the name of a preexisting secret containing TLS certificates for exporters, which will be mounted under "/tls".
        # Read more about TLS configuration of exporters in the [OpenTelemetry Collector documentation](https://github.com/open-telemetry/opentelemetry-collector/blob/main/config/configtls/README.md)
        exportersTlsSecretName: ""
    serviceAccount:
      # -- Enable creation of ServiceAccount for `otel-collector`
      create: false
      # -- Name of the ServiceAccount to be created or an existing ServiceAccount
      name: ""
    containerSecurityContext:
      allowPrivilegeEscalation: false
      runAsUser: 100
      runAsGroup: 101

  agent:
    # -- Name used by resources. Does not affect service names or PVCs.
    name: "otel-agent"
    # -- Resource requests & limits for the `otel-agent` container,
    # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)
    hostPorts:
      otlpGrpc: 4317
      otlpHttp: 4318
      zpages: 55679
    resources:
      limits:
        cpu: "500m"
        memory: 500Mi
      requests:
        cpu: "100m"
        memory: 100Mi
    serviceAccount:
      # -- Enable creation of ServiceAccount for `otel-agent`
      create: false
      # -- Name of the ServiceAccount to be created or an existing ServiceAccount
      name: ""
    containerSecurityContext:
      allowPrivilegeEscalation: false
      runAsUser: 100
      runAsGroup: 101

nodeExporter:
  # -- Enable `node-exporter`
  enabled: true
  image:
    # -- Docker image tag for the `node-exporter` image
    defaultTag: 6.5.0@sha256:e2ab2b6afc4f97f16c9a26915588e5c4858fd0632638753c76b2471a49166705
    # -- Docker image name for the `node-exporter` image
    name: "node-exporter"
  # -- Name used by resources. Does not affect service names or PVCs.
  name: "node-exporter"
  podSecurityPolicy:
    # -- Enable [PodSecurityPolicy](https://kubernetes.io/docs/concepts/policy/pod-security-policy/) for `node-exporter` pods
    enabled: false
  # -- Resource requests & limits for the `node-exporter` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)
  resources:
    limits:
      cpu: "1"
      memory: 1Gi
    requests:
      cpu: ".2"
      memory: 100Mi
  serviceAccount:
    # -- Enable creation of ServiceAccount for `node-exporter`
    create: false
    # -- Name of the ServiceAccount to be created or an existing ServiceAccount
    name: node-exporter
  # Share the host process ID namespace.
  hostPID: true
  ## Additional container arguments for the node-exporter container
  extraArgs: []
  #   - --collector.diskstats.ignored-devices=^(ram|loop|fd|(h|s|v)d[a-z]|nvme\\d+n\\d+p)\\d+$
  #   - --collector.textfile.directory=/run/prometheus
  # -- Security context for the `node-exporter` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container)
  containerSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 65534
    runAsGroup: 65534
    readOnlyRootFilesystem: true
  # -- Security context for the `node-exporter` pod,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod)
  podSecurityContext:
    fsGroup: 65534
    runAsGroup: 65534
    runAsNonRoot: true
    runAsUser: 65534

pgsql:
  # -- Enable `pgsql` PostgreSQL server
  enabled: true
  auth:
    # -- Name of existing secret to use for Postgres credentials
    # The secret must contain the keys `user`, `password`, `database`, `host` and `port`.
    # `auth.user`, `auth.password`, etc. are ignored if this is enabled
    existingSecret: ""
    # -- Sets postgres database name
    database: "sg"
    # -- Sets postgres host
    host: "pgsql"
    # -- Sets postgres username
    user: "sg"
    # -- Sets postgres password
    password: "password"
    # -- Sets postgres port
    port: "5432"
    # -- Sets postgres SSL mode
    sslmode: "disable"  # set to "require" to enable SSL
  # -- Name of existing ConfigMap for `pgsql`. It must contain a `postgresql.conf` key
  existingConfig: ""  # Name of an existing configmap
  # -- Additional PostgreSQL configuration. This will override or extend our default configuration.
  # Notes: This is expecting a multiline string.
  # Learn more from our [recommended PostgreSQL configuration](https://docs.sourcegraph.com/admin/config/postgres-conf) and [PostgreSQL documentation](https://www.postgresql.org/docs/12/config-setting.html)
  additionalConfig: ""
  image:
    # -- Docker image tag for the `pgsql` image
    defaultTag: 6.5.0@sha256:f243676c3222d9bd228cbbbde964ba84d996fe509cf55d1e4301b9f2863cbbbe
    # -- Docker image name for the `pgsql` image
    name: "postgresql-16"
  # -- Security context for the `pgsql` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container)
  containerSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 999
    runAsGroup: 999
    readOnlyRootFilesystem: true
  # -- Configuration for the `pgsql-exporter` sidecar container
  postgresExporter: {}
  # -- Name used by resources. Does not affect service names or PVCs.
  name: "pgsql"
  # -- Resource requests & limits for the `pgsql` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)
  resources:
    limits:
      cpu: "4"
      memory: 4Gi
    requests:
      cpu: "4"
      memory: 4Gi
  # -- Security context for the `pgsql` pod,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod)
  podSecurityContext:
    # Required to prevent escalations to root.
    runAsUser: 999
    runAsGroup: 999
    fsGroup: 999
    fsGroupChangePolicy: "OnRootMismatch"
  serviceAccount:
    # -- Enable creation of ServiceAccount for `pgsql`
    create: false
    # -- Name of the ServiceAccount to be created or an existing ServiceAccount
    name: ""
  # -- PVC Storage Request for `pgsql` data volume
  storageSize: 200Gi

postgresExporter:
  image:
    # -- Docker image tag for the `pgsql-exporter` image
    defaultTag: 6.5.0@sha256:57e4a3bd2e566afe31c23e7f802c75f782daf3e2360d16ad6d33ed6899799e1b
    # -- Docker image name for the `pgsql-exporter` image
    name: "postgres_exporter"
  # -- Resource requests & limits for the `pgsql-exporter` sidecar container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)
  resources:
    limits:
      cpu: 10m
      memory: 50Mi
    requests:
      cpu: 10m
      memory: 50Mi

syntacticCodeIntel:
  enabled: false
  properties:
    # -- port to whick worker API will bind
    workerPort: 3188
  image:
    # -- Docker image tag for the `syntactic-code-intel-worker` image
    defaultTag: 6.5.0@sha256:22f85548fbaae57ff15040863d180ad4b727f98a02f415206bc5fd651630919b
    # -- Docker image name for the `syntactic-code-intel-worker` image
    name: "syntactic-code-intel-worker"
  # -- Security context for the `syntactic-code-intel-worker` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container)
  containerSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true
  # -- Name used by resources. Does not affect service names or PVCs.
  name: "syntactic-code-intel-worker"
  # -- Security context for the `syntactic-code-intel-worker` pod,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod)
  podSecurityContext: {}
  # -- Number of `syntactic-code-intel-worker` pod
  replicaCount: 2
  # -- Resource requests & limits for the `syntactic-code-intel-worker` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)
  resources:
    limits:
      cpu: "2"
      memory: 4G
    requests:
      cpu: 500m
      memory: 2G
  serviceAccount:
    # -- Enable creation of ServiceAccount for `syntactic-code-intel-worker`
    create: false
    # -- Name of the ServiceAccount to be created or an existing ServiceAccount
    name: ""

preciseCodeIntel:
  # -- Environment variables for the `precise-code-intel-worker` container
  env:
    NUM_WORKERS:
      value: "4"
  image:
    # -- Docker image tag for the `precise-code-intel-worker` image
    defaultTag: 6.5.0@sha256:138f2e8278ec2180b334634a75bc494a17a8f0ad6fa07131ac83507ead167198
    # -- Docker image name for the `precise-code-intel-worker` image
    name: "precise-code-intel-worker"
  # -- Security context for the `precise-code-intel-worker` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container)
  containerSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true
  # -- Name used by resources. Does not affect service names or PVCs.
  name: "precise-code-intel-worker"
  # -- Security context for the `precise-code-intel-worker` pod,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod)
  podSecurityContext: {}
  # -- Number of `precise-code-intel-worker` pod
  replicaCount: 2
  # -- Resource requests & limits for the `precise-code-intel-worker` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)
  resources:
    limits:
      cpu: "2"
      memory: 4G
    requests:
      cpu: 500m
      memory: 2G
  serviceAccount:
    # -- Enable creation of ServiceAccount for `precise-code-intel-worker`
    create: false
    # -- Name of the ServiceAccount to be created or an existing ServiceAccount
    name: ""

prometheus:
  # -- Enable `prometheus` (recommended)
  enabled: true
  # -- Name of existing ConfigMap for `pgsql`. It must contain a `prometheus.yml` key
  existingConfig: "" # Name of an existing configmap
  image:
    # -- Docker image tag for the `prometheus` image
    defaultTag: 6.5.0@sha256:df361fb0c98513816b8e80bea52950bce63c4f38a96aa9e47b87176a0dec31e3
    # -- Docker image name for the `prometheus` image
    name: "prometheus"
  # -- Security context for the `prometheus` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container)
  containerSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 100
    # Read-only filesystem not supported for the prometheus container,
    # see [sourcegraph/issues/34012](https://github.com/sourcegraph/sourcegraph/issues/34012) for more information
    readOnlyRootFilesystem: false
  # -- Name used by resources. Does not affect service names or PVCs.
  name: "prometheus"
  # -- Enable RBAC for `prometheus`
  privileged: true
  # -- Resource requests & limits for the `prometheus` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)
  # Prometheus is relied upon to monitor services for sending alerts to site admins when
  # something is wrong with Sourcegraph, thus its memory requests and limits are the same to
  # guarantee it has enough memory to perform its job reliably and prevent conflicts with
  # other pods on the same host node.
  #
  # The limit chosen here is based on what works reliably on Sourcegraph.com with lots
  # of traffic.
  resources:
    limits:
      cpu: "2"
      memory: 6G
    requests:
      cpu: 500m
      memory: 6G
  # -- Security context for the `prometheus` pod,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod)
  podSecurityContext:
    fsGroup: 100
    fsGroupChangePolicy: "OnRootMismatch"
  serviceAccount:
    # -- Enable creation of ServiceAccount
    create: true
    # -- Name of the ServiceAccount to be created or an existing ServiceAccount
    name: prometheus
  # -- PVC Storage Request for `prometheus` data volume
  storageSize: 200Gi

redisCache:
  # -- Enable `redis-cache` Redis server
  enabled: true
  image:
    # -- Docker image tag for the `redis-cache` image
    defaultTag: 6.5.0@sha256:ece3395b4bb5263be58fda8da466331e8a4b6cef970bfbd15a33e36835aae9bb
    # -- Docker image name for the `redis-cache` image
    name: "redis-cache"
  connection:
    # -- Name of existing secret to use for Redis endpoint
    # The secret must contain the key `endpoint` and should follow IANA specification
    # learn more from the [Helm docs](https://docs.sourcegraph.com/admin/install/kubernetes/helm#using-external-redis-instances)
    existingSecret: ""
    # -- Endpoint to use for redis-cache. Supports either host:port or IANA specification
    endpoint: "redis-cache:6379"
  # -- Security context for the `redis-cache` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container)
  containerSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 999
    runAsGroup: 1000
    readOnlyRootFilesystem: true
  # -- Resource requests & limits for the `redis-cache` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)
  resources:
    limits:
      cpu: "1"
      memory: 7Gi
    requests:
      cpu: "1"
      memory: 7Gi
  # -- Name used by resources. Does not affect service names or PVCs.
  name: "redis-cache"
  # -- Security context for the `redis-cache` pod,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod)
  podSecurityContext:
    fsGroup: 1000
    fsGroupChangePolicy: "OnRootMismatch"
  serviceAccount:
    # -- Enable creation of ServiceAccount for `redis-cache`
    create: false
    # -- Name of the ServiceAccount to be created or an existing ServiceAccount
    name: ""
  # -- PVC Storage Request for `redis-cache` data volume
  storageSize: 100Gi

redisExporter:
  image:
    # -- Docker image tag for the `redis-exporter` image
    defaultTag: 6.5.0@sha256:a4513fb9f61d9440b089c5bc0c2a31b9c1c18cb96bfefd8c0ccd731ded3a680e
    # -- Docker image name for the `redis-exporter` image
    name: "redis_exporter"
  # -- Security context for the `redis-exporter` sidecar container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container)
  containerSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 999
    runAsGroup: 1000
    readOnlyRootFilesystem: true
  # -- Resource requests & limits for the `redis-exporter` sidecar container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)
  resources:
    limits:
      cpu: 10m
      memory: 100Mi
    requests:
      cpu: 10m
      memory: 100Mi

redisStore:
  # -- Enable `redis-store` Redis server
  enabled: true
  connection:
    # -- Name of existing secret to use for Redis endpoint
    # The secret must contain the key `endpoint` and should follow IANA specification
    # learn more from the [Helm docs](https://docs.sourcegraph.com/admin/install/kubernetes/helm#using-external-redis-instances)
    existingSecret: ""
    # -- Endpoint to use for redis-store. Supports either host:port or IANA specification
    endpoint: "redis-store:6379"
  image:
    # -- Docker image tag for the `redis-store` image
    defaultTag: 6.5.0@sha256:a896db19bc41918853e4023b370bcfe93cfa4711834035bf76618da4e94e4185
    # -- Docker image name for the `redis-store` image
    name: "redis-store"
  # -- Security context for the `redis-store` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container)
  containerSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 999
    runAsGroup: 1000
    readOnlyRootFilesystem: true
  # -- Resource requests & limits for the `redis-store` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)
  resources:
    limits:
      cpu: "1"
      memory: 7Gi
    requests:
      cpu: "1"
      memory: 7Gi
  # -- Name used by resources. Does not affect service names or PVCs.
  name: "redis-store"
  # -- Security context for the `redis-store` pod,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod)
  podSecurityContext:
    fsGroup: 1000
    fsGroupChangePolicy: "OnRootMismatch"
  serviceAccount:
    # -- Enable creation of ServiceAccount for `redis-store`
    create: false
    # -- Name of the ServiceAccount to be created or an existing ServiceAccount
    name: ""
  # -- PVC Storage Request for `redis-store` data volume
  storageSize: 100Gi

searcher:
  image:
    # -- Docker image tag for the `searcher` image
    defaultTag: 6.5.0@sha256:a3f2f542fc41ad7a7330d8d748b8d0978e935e486f3740eb1afe8047fd08b821
    # -- Docker image name for the `searcher` image
    name: "searcher"
  # -- Security context for the `searcher` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container)
  containerSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true
  # -- Security context for the `searcher` pod,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod)
  podSecurityContext:
    runAsUser: 100
    fsGroup: 101
    fsGroupChangePolicy: "OnRootMismatch"
  # -- Name used by resources. Does not affect service names or PVCs.
  name: "searcher"
  # -- Number of `searcher` pod
  replicaCount: 1
  # -- Resource requests & limits for the `searcher` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)
  resources:
    limits:
      cpu: "2"
      memory: 2G
    requests:
      cpu: 500m
      memory: 500M
  serviceAccount:
    # -- Enable creation of ServiceAccount for `searcher`
    create: false
    # -- Name of the ServiceAccount to be created or an existing ServiceAccount
    name: ""
  # -- Size of the PVC for searcher pods to store cache data
  storageSize: 26Gi

storageClass:
  # -- Enable creation of storageClass.
  # Disable if you have your own existing storage class
  create: true
  # -- Name of the storageClass.
  # Use to customize to the existing storage class name
  name: sourcegraph
  # -- Name of the storageClass provisioner,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/concepts/storage/storage-classes/#provisioner)
  # and consult your cloud provider persistent storage documentation
  provisioner: kubernetes.io/gce-pd
  # -- Value of `type` key in storageClass `parameters`,
  # consult your cloud provider persistent storage documentation
  type: pd-ssd
  # -- Extra parameters of storageClass,
  # consult your cloud provider persistent storage documentation
  parameters: {}
  # -- Persistent volumes topology configuration,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/concepts/storage/storage-classes/#allowed-topologies)
  allowedTopologies: []

syntectServer:
  image:
    # -- Docker image tag for the `syntect-server` image
    defaultTag: 6.5.0@sha256:e902afe4dd0d73bd355a0e5dc6385e41ba698332e4702093ac6661e0a4f9b465
    # -- Docker image name for the `syntect-server` image
    name: "syntax-highlighter"
  # -- Security context for the `syntect-server` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container)
  containerSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true
  # -- Name used by resources. Does not affect service names or PVCs.
  name: "syntect-server"
  # -- Security context for the `syntect-server` pod,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod)
  podSecurityContext: {}
  # -- Number of `syntect-server` pod
  replicaCount: 1
  # -- Resource requests & limits for the `syntect-server` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)
  resources:
    limits:
      cpu: "4"
      memory: 6G
    requests:
      cpu: 250m
      memory: 2G
  serviceAccount:
    # -- Enable creation of ServiceAccount for `syntect-server`
    create: false
    # -- Name of the ServiceAccount to be created or an existing ServiceAccount
    name: ""

jaeger:
  collector:
    # -- Name of jaeger `collector` service
    name: ""
    # -- Add extra annotations to jaeger `collector` service
    serviceAnnotations: {}
    # -- Add extra labels to jaeger `collector` service
    serviceLabels: {}
    # -- Kubernetes service type of jaeger `collector` service,
    # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types)
    # @default -- "ClusterIP"
    serviceType: ""
  # -- Enable `jaeger`
  enabled: false
  image:
    # -- Docker image tag for the `jaeger` image
    defaultTag: 6.5.0@sha256:1587fbc95222b5810e8f946deeb9c0718b569af2c10fe8b681aaad07d2cfa610
    # -- Docker image name for the `jaeger` image
    name: "jaeger-all-in-one"
  # -- Name used by resources. Does not affect service names or PVCs.
  name: "jaeger"
  # -- Default args passed to the `jaeger` binary
  args:
    [
      "--memory.max-traces=20000",
      "--sampling.strategies-file=/etc/jaeger/sampling_strategies.json",
      "--collector.otlp.enabled",
      "--collector.otlp.grpc.host-port=:4320",
      "--collector.otlp.http.host-port=:4321",
    ]
  # -- Security context for the `jaeger` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container)
  containerSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true
  # -- Security context for the `jaeger` pod,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod)
  podSecurityContext: {}
  query:
    # -- Name of jaeger `query` service
    name: ""
    # -- Add extra annotations to jaeger `query` service
    serviceAnnotations: {}
    # -- Add extra labels to jaeger `query` service
    serviceLabels: {}
    # -- Kubernetes service type of jaeger `query` service,
    # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types)
    # @default -- "ClusterIP"
    serviceType: ""
  # -- Number of `jaeger` pod
  replicaCount: 1
  # -- Resource requests & limits for the `jaeger` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)
  resources:
    limits:
      cpu: "1"
      memory: 1G
    requests:
      cpu: 500m
      memory: 500M
  serviceAccount:
    # -- Enable creation of ServiceAccount for `jaeger`
    create: false
    # -- Name of the ServiceAccount to be created or an existing ServiceAccount
    name: ""

worker:
  image:
    # -- Docker image tag for the `worker` image
    defaultTag: 6.5.0@sha256:ecb7582d6eb77bf332d51f5f06afa3853a3004e810e3089ab6478b695066b8ad
    # -- Docker image name for the `worker` image
    name: "worker"
  # -- Security context for the `worker` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container)
  containerSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true
  # -- Name used by resources. Does not affect service names or PVCs.
  name: "worker"
  # -- Environment variables for the `worker` container
  env: {}
  # -- Security context for the `worker` pod,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod)
  podSecurityContext: {}
  # -- Number of `worker` pod
  replicaCount: 1
  # -- List of jobs to block globally
  # If replicas are configured, use this values to block jobs instead of manually setting WORKER_JOB_BLOCKLIST
  blocklist: []
  # -- Scale worker horizontally by configuring additional replicas dedicated to specific jobs.
  # for each replica, configure the dedicated jobs to run on this replica.
  # learn more from https://sourcegraph.com/docs/admin/workers#3-split-jobs-and-scale-independently
  replicas:
    []
    # - jobs: []
    #   resources:
    #     limits:
    #       cpu: "2"
    #       memory: 4G
    #     requests:
    #       cpu: 500m
    #       memory: 2G

  # -- Resource requests & limits for the `worker` container,
  # learn more from the [Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)
  resources:
    limits:
      cpu: "2"
      memory: 4G
    requests:
      cpu: 500m
      memory: 2G
  serviceAccount:
    # -- Enable creation of ServiceAccount for `worker`
    create: false
    # -- Name of the ServiceAccount to be created or an existing ServiceAccount
    name: ""

# -- Additional resources to include in the rendered manifest. Templates are supported.
extraResources: []

# -- Additional priorityClasses minimise re-scheduling downtime for StatefulSets. Each StatefulSets might use different priority class.
# learn more from the [Kubernetes documentation](https://kubernetes.io/docs/concepts/scheduling-eviction/pod-priority-preemption/#priorityclass)
# Sample class definition:
# - name: gitserver-class
#   value: 100
#   preemptionPolicy: Never
#   description: "gitserver priority class"
priorityClasses: []
