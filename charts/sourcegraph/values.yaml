# To customize these values, use an override file:
# https://sourcegraph.com/github.com/sourcegraph/deploy-sourcegraph-helm/-/blob/charts/sourcegraph/README.md#customizations

### Common Configuration ###
sourcegraph:
  affinity: {}
  image:
    defaultTag: '{{ .Chart.AppVersion }}'
    pullPolicy: IfNotPresent
    repository: index.docker.io/sourcegraph
    # When set to true, sourcegraph.image.defaultTag is used as the default defaultTag for all services, instead of service-specific default defaultTags
    useGlobalTagAsDefault: false
  # Mount a named secret containing docker credentials
  imagePullSecrets: []
  # Add a global label to all resources
  labels: {}
  # When true, remove all resource stanzas, allowing the scheduler to best-fit pods. Intended for local development with limited resources.
  localDevMode: false
  # Set a custom name for the app.kubernetes.io/name annotation
  nameOverride: ""
  nodeSelector: {}
  podAnnotations: {}
  podLabels: {}
  revisionHistoryLimit: 10
  serviceLabels: {}
  tolerations: {}


# Generic application configuration options, used by most applications below
# app: # Generally matches directory name
#   replicaCount: 1
#
#   image:
#     # Application-specific default tag. Overrides the global tag. Do not modify - use tag instead
#     defaultTag:
#     # Override the default tag on a service-specific basis
#     tag:
#     # Override the default docker image name
#     name:
#
#   # Add additional labels and annotations to various resources
#   labels: {}
#   podLabels: {}
#   podAnnotations: {}
#   serviceLabels: {}
#   serviceAnnotations: {}
#   # Override default service/deployment names
#   name: ""
#   # Provide custom environment variables
#   env: {}
#   # Set resource requests / limits
#   resources: {}
#   podSecurityContext: {}
#   securityContext: {}
#   # Add additional volumes and mounts to deployments
#   extraVolumeMounts: {}
#   extraVolumes: {}
#   # Add sidecars
#   extraContainers: {}
#   # Toggle serviceAccount creation
#   serviceAccount.create: true
#   # Customize service account name
#   serviceAccount.name: ""
#   # Override service type (defaults to ClusterIP)
#   serviceType: ""
#   # Set disk size on PVC's for stateful deployments
#   storageSize: ""
#   # Optionally bind PVC's to an existing PV
#   volumeName: ""
#   # Use an existing configmap (specified by name) instead of creating one
#   existingConfig: ""
#   # Toggle deployment of applications on/off. Applies to databases and third-party applications
#   enabled: true

alpine: # Used in init containers
  image:
    defaultTag: 3.35.1@sha256:a26a8820b8794c2d85c67f7b61b00b4d468af722047b8093235a827c08ea878a
    name: "alpine-3.12"
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 999
    runAsGroup: 999
    readOnlyRootFilesystem: true
  resources:
    limits:
      cpu: 10m
      memory: 50Mi
    requests:
      cpu: 10m
      memory: 50Mi

cadvisor:
  enabled: true
  image:
    defaultTag: 3.35.1@sha256:1a1b07c91ee0bd32240a75370998d7a990dc5ebe34d1aa4b19f331adb9017034
    name: "cadvisor"
  podSecurityPolicy:
    enabled: false
  resources:
    limits:
      cpu: 300m
      memory: 2000Mi
    requests:
      cpu: 150m
      memory: 200Mi
  serviceAccount:
    create: true
    name: cadvisor

codeInsightsDB:
  enabled: true
  env:
    POSTGRES_PASSWORD: # Accessible by Sourcegraph applications on the network only, so password auth is not used.
      value: password
  existingConfig: "" # Name of an existing configmap
  image:
    defaultTag: 3.35.1@sha256:aca7e3122d4528fb33e7cf613f8fe19828cedbd7ca66d8e35215dd4626636101
    name: "codeinsights-db"
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 70
    runAsGroup: 70
    readOnlyRootFilesystem: true
  replicaCount: 1
  resources:
    limits:
      cpu: "4"
      memory: 2Gi
    requests:
      cpu: "4"
      memory: 2Gi
  securityContext:
    runAsUser: 70
    fsGroup: 70
    fsGroupChangePolicy: "OnRootMismatch"
  storageSize: 200Gi

codeIntelDB:
  enabled: true
  existingConfig: "" # Name of an existing configmap
  image:
    defaultTag: 3.35.1@sha256:3c4a01564e0222333b9d6566d3d64107cdd7c47c280eed220d5842931dcfa33d
    name: "codeintel-db"
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 999
    runAsGroup: 999
    readOnlyRootFilesystem: true
  postgresExporter:
    env:
      DATA_SOURCE_NAME:
        value: postgres://sg:@localhost:5432/?sslmode=disable
  replicaCount: 1
  resources:
    limits:
      cpu: "4"
      memory: 4Gi
    requests:
      cpu: "4"
      memory: 4Gi
  securityContext:
    runAsUser: 999
    fsGroup: 999
    fsGroupChangePolicy: "OnRootMismatch"
  storageSize: 200Gi

frontend:
  env:
    CODEINSIGHTS_PGDATASOURCE:
      value: postgres://postgres:password@codeinsights-db:5432/postgres
    CODEINTEL_PGDATABASE:
      value: sg
    CODEINTEL_PGHOST:
      value: codeintel-db
    CODEINTEL_PGPORT:
      value: "5432"
    CODEINTEL_PGSSLMODE:
      value: disable
    CODEINTEL_PGUSER:
      value: sg
    GRAFANA_SERVER_URL:
      value: http://grafana:30070
    JAEGER_SERVER_URL:
      value: http://jaeger-query:16686
    PGDATABASE:
      value: sg
    PGHOST:
      value: pgsql
    PGUSER:
      value: sg
    PROMETHEUS_URL:
      value: http://prometheus:30090
  image:
    defaultTag: 3.35.1@sha256:69dc2fff40d2d2c8bd0ef2a8fe0744395c5784f1d380ac50917b485ffa5f70dd
    name: "frontend"
  ingress:
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/proxy-body-size: 150m
    enabled: true
    host: "" # External host name for SSL
    ingressClassName: null # Available in Kubernetes 1.18+
    tlsSecret: "" # Secret containing SSL cert
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true
  privileged: true # Creates Role instead of using existing roles
  replicaCount: 2
  resources:
    limits:
      cpu: "2"
      ephemeral-storage: 8Gi
      memory: 4G
    requests:
      cpu: "2"
      ephemeral-storage: 4Gi
      memory: 2G
  serviceAccount:
    create: true
    name: sourcegraph-frontend

githubProxy:
  image:
    defaultTag: 3.35.1@sha256:0d3eb3a575c452c6feced5f0967f0b8f264bd61e346e018eb08fa4fad3afea29
    name: "github-proxy"
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true
  replicaCount: 1
  resources:
    limits:
      cpu: "1"
      memory: 1G
    requests:
      cpu: 100m
      memory: 250M

gitserver:
  image:
    defaultTag: 3.35.1@sha256:b7b3ed929ec510a4abea18d95be85f146e8c703429d942eb88db133d5ed6540e
    name: "gitserver"
  labels: {}
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true
  replicaCount: 1
  resources:
    limits:
      cpu: "4"
      memory: 8G
    requests:
      cpu: "4"
      memory: 8G
  securityContext:
    runAsUser: 100
    runAsGroup: 101
    fsGroup: 101
    fsGroupChangePolicy: "OnRootMismatch"
  storageSize: 200Gi

grafana:
  enabled: true
  existingConfig: "" # Name of an existing configmap
  image:
    defaultTag: 3.35.1@sha256:f29d3ee341c31318f5d3175204a52e58c5289f9f679956445ad111c38f93dbf5
    name: "grafana"
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 472
    runAsGroup: 472
    readOnlyRootFilesystem: true
  replicaCount: 1
  resources:
    limits:
      cpu: "1"
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 512Mi
  securityContext:
    runAsUser: 472
    runAsGroup: 472
    fsGroup: 472
    fsGroupChangePolicy: "OnRootMismatch"
  serviceAccount:
    create: true
  storageSize: 2Gi

indexedSearch:
  image:
    defaultTag: 3.35.1@sha256:1e220469361143daaa16f07cf4a3b0b40f2b311917c260e3b883beff7ed89d49
    name: "indexed-searcher"
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true
  replicaCount: 1
  resources:
    limits:
      cpu: "2"
      memory: 4G
    requests:
      cpu: 500m
      memory: 2G
  securityContext:
    fsGroup: 101
    fsGroupChangePolicy: "OnRootMismatch"
  # The size of disk to used for search indexes.
  # This should typically be gitserver disk size multipled by the number of gitserver shards.
  storageSize: 200Gi

indexedSearchIndexer:
  image:
    defaultTag: 3.35.1@sha256:32b46de3caa2fa37bb880ba6152d37bfe6b6efeb73cf36db4ae70c45d9b19f18
    name: "search-indexer"
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true
  resources:
    # zoekt-indexserver is CPU bound. The more CPU you allocate to it, the
    # lower lag between a new commit and it being indexed for search.
    limits:
      cpu: "8"
      memory: 8G
    requests:
      cpu: "4"
      memory: 4G

minio:
  enabled: true
  env:
    MINIO_ACCESS_KEY:
      value: AKIAIOSFODNN7EXAMPLE
    MINIO_SECRET_KEY:
      value: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
  image:
    defaultTag: 3.35.1@sha256:66925bab722ed11584e1135687b5c1e00a13c550e38d954a56048c90f17edc53
    name: "minio"
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
  replicaCount: 1
  resources:
    limits:
      cpu: "1"
      memory: 500M
    requests:
      cpu: "1"
      memory: 500M
  securityContext:
    runAsUser: 100
    runAsGroup: 101
    fsGroup: 101
    fsGroupChangePolicy: "OnRootMismatch"
  storageSize: 100Gi

pgsql:
  enabled: true
  existingConfig: "" # Name of an existing configmap
  image:
    defaultTag: 3.35.1@sha256:4766d3f59d8c81c1e525cbc03cf2c8fb321026821c4230ab63eed8b36b87e09e
    name: "postgres-12.6-alpine"
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 999
    runAsGroup: 999
    readOnlyRootFilesystem: true
  postgresExporter:
    env:
      DATA_SOURCE_NAME:
        value: postgres://sg:@localhost:5432/?sslmode=disable
  replicaCount: 1
  resources:
    limits:
      cpu: "4"
      memory: 4Gi
    requests:
      cpu: "4"
      memory: 4Gi
  securityContext:
    # Required to prevent escalations to root.
    runAsUser: 999
    runAsGroup: 999
    fsGroup: 999
    fsGroupChangePolicy: "OnRootMismatch"
  storageSize: 200Gi

postgresExporter:
  image:
    defaultTag: 3.35.1@sha256:3fd6e36dc44a41dd2a00cad70c9c8124834db67077eea26ad3fad49b1e6df95b
    name: "postgres_exporter"
  resources:
    limits:
      cpu: 10m
      memory: 50Mi
    requests:
      cpu: 10m
      memory: 50Mi

preciseCodeIntel:
  env:
    NUM_WORKERS:
      value: "4"
  image:
    defaultTag: 3.35.1@sha256:c0504677b3b300922aa1c0f81d449c053e2733a83eda67ee0b3dfc82d25a5d61
    name: "precise-code-intel-worker"
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true
  replicaCount: 2
  resources:
    limits:
      cpu: "2"
      memory: 4G
    requests:
      cpu: 500m
      memory: 2G

prometheus:
  enabled: true
  existingConfig: "" # Name of an existing configmap
  image:
    defaultTag: 3.35.1@sha256:f78c941105f43bc90ab2b6dbe5cb0f1fb3e92936c0e86d623d2b8e96101eb1d6
    name: "prometheus"
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 100
    readOnlyRootFilesystem: true
  privileged: true
  replicaCount: 1
  # Prometheus is relied upon to monitor services for sending alerts to site admins when
  # something is wrong with Sourcegraph, thus its memory requests and limits are the same to
  # guarantee it has enough memory to perform its job reliably and prevent conflicts with
  # other pods on the same host node.
  #
  # The limit chosen here is based on what works reliably on Sourcegraph.com with lots
  # of traffic.
  resources:
    limits:
      cpu: "2"
      memory: 6G
    requests:
      cpu: 500m
      memory: 6G
  securityContext:
    fsGroup: 100
    fsGroupChangePolicy: "OnRootMismatch"
  serviceAccount:
    create: true
  storageSize: 200Gi

redisCache:
  enabled: true
  image:
    defaultTag: 3.35.1@sha256:6fc03d537d4e451820ac2a4ab8d9ed76bb6607318beec0fa6cb1e6a81f763927
    name: "redis-cache"
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 999
    runAsGroup: 1000
    readOnlyRootFilesystem: true
  replicaCount: 1
  resources:
    limits:
      cpu: "1"
      memory: 7Gi
    requests:
      cpu: "1"
      memory: 7Gi
  securityContext:
    fsGroup: 1000
    fsGroupChangePolicy: "OnRootMismatch"
  storageSize: 100Gi

redisExporter:
  image:
    defaultTag: 84464_2021-01-15_c2e4c28@sha256:f3f51453e4261734f08579fe9c812c66ee443626690091401674be4fb724da70
    name: "redis_exporter"
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 999
    runAsGroup: 1000
    readOnlyRootFilesystem: true
  resources:
    limits:
      cpu: 10m
      memory: 100Mi
    requests:
      cpu: 10m
      memory: 100Mi

redisStore:
  enabled: true
  image:
    defaultTag: 3.35.1@sha256:1e35206fb4c3092b158a178aacca86375c83443c3f20807a58194784fcb43682
    name: "redis-store"
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 999
    runAsGroup: 1000
    readOnlyRootFilesystem: true
  replicaCount: 1
  resources:
    limits:
      cpu: "1"
      memory: 7Gi
    requests:
      cpu: "1"
      memory: 7Gi
  securityContext:
    fsGroup: 1000
    fsGroupChangePolicy: "OnRootMismatch"
  storageSize: 100Gi

repoUpdater:
  image:
    defaultTag: 3.35.1@sha256:4f65c45528252dfba56eefc63f1a199b7ae3201e8afa9d6f21655f15fd27f0b4
    name: "repo-updater"
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true
  replicaCount: 1
  resources:
    limits:
      cpu: "1"
      memory: 2Gi
    requests:
      cpu: "1"
      memory: 500Mi

searcher:
  image:
    defaultTag: 3.35.1@sha256:4505e78d02a57f4cb9ec34374332939668ad7fb6f362c9fc5e5862f9e051b777
    name: "searcher"
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true
  replicaCount: 2
  resources:
    limits:
      cpu: "2"
      ephemeral-storage: 26G
      memory: 2G
    requests:
      cpu: 500m
      ephemeral-storage: 25G
      memory: 500M

storageClass:
  create: true # Disable if you have your own existing storage class
  name: sourcegraph # Customize to the existing storage class name
  provisioner: kubernetes.io/gce-pd
  type: pd-ssd

symbols:
  image:
    defaultTag: 3.35.1@sha256:24928714b3a5e7738873bc07c537b26df31c8265ffdf404e83bfc5f42fc66c48
    name: "symbols"
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true
  replicaCount: 1
  resources:
    limits:
      cpu: "2"
      ephemeral-storage: 12G
      memory: 2G
    requests:
      cpu: 500m
      ephemeral-storage: 10G
      memory: 500M

syntectServer:
  image:
    defaultTag: 3.35.1@sha256:465c3f7ba508c1e0af1f4fc483f87de926c190d0b807d910da9fae55f0780977
    name: "syntax-highlighter"
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true
  replicaCount: 1
  resources:
    limits:
      cpu: "4"
      memory: 6G
    requests:
      cpu: 250m
      memory: 2G

tracing:
  collector: {}
  enabled: true
  image:
    defaultTag: 3.35.1@sha256:65fd8a73cf6d1d86cba2b14bddc31b82ec9f699dad3d7a81a566988438144c8f
    name: "jaeger-all-in-one"
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true
  query: {}
  replicaCount: 1
  resources:
    limits:
      cpu: "1"
      memory: 1G
    requests:
      cpu: 500m
      memory: 500M

tracingAgent:
  enabled: true
  image:
    defaultTag: 3.35.1@sha256:41c01f6227d936c63198161acb7fa1e4f60afab188eb344a471ee8059b21227d
    name: "jaeger-agent"
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true
  resources:
    limits:
      cpu: "1"
      memory: 500M
    requests:
      cpu: 100m
      memory: 100M

worker:
  image:
    defaultTag: 3.35.1@sha256:4276db13862a9cb5d0019a208b0e312907233167c40d39e4e3eeddb19535e103
    name: "worker"
  podSecurityContext:
    allowPrivilegeEscalation: false
    runAsUser: 100
    runAsGroup: 101
    readOnlyRootFilesystem: true
  replicaCount: 1
  resources:
    limits:
      cpu: "2"
      memory: 4G
    requests:
      cpu: 500m
      memory: 2G
